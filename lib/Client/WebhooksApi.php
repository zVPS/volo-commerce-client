<?php
/**
 * WebhooksApi
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Client;

use \VoloCommerce\Api\v1\ApiClient;
use \VoloCommerce\Api\v1\ApiException;
use \VoloCommerce\Api\v1\Configuration;
use \VoloCommerce\Api\v1\ObjectSerializer;

/**
 * WebhooksApi Class Doc Comment
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebhooksApi
{
    /**
     * API Client
     *
     * @var \VoloCommerce\Api\v1\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \VoloCommerce\Api\v1\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\VoloCommerce\Api\v1\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \VoloCommerce\Api\v1\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \VoloCommerce\Api\v1\ApiClient $apiClient set the API client
     *
     * @return WebhooksApi
     */
    public function setApiClient(\VoloCommerce\Api\v1\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createHook
     *
     * Returns registed webhook id
     *
     * @param \VoloCommerce\Api\v1\Model\RegisterWebHookRequest $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\WebHookSubcribeResponse
     */
    public function createHook($body = null)
    {
        list($response) = $this->createHookWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createHookWithHttpInfo
     *
     * Returns registed webhook id
     *
     * @param \VoloCommerce\Api\v1\Model\RegisterWebHookRequest $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\WebHookSubcribeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createHookWithHttpInfo($body = null)
    {
        
        // parse inputs
        $resourcePath = "/webhooks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\WebHookSubcribeResponse',
                '/webhooks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\WebHookSubcribeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\WebHookSubcribeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation doDelete
     *
     * Delete registered webhook
     *
     * @param int $web_hook_id WebHook ID (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\DeleteWebHookResponse
     */
    public function doDelete($web_hook_id)
    {
        list($response) = $this->doDeleteWithHttpInfo($web_hook_id);
        return $response;
    }

    /**
     * Operation doDeleteWithHttpInfo
     *
     * Delete registered webhook
     *
     * @param int $web_hook_id WebHook ID (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\DeleteWebHookResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function doDeleteWithHttpInfo($web_hook_id)
    {
        // verify the required parameter 'web_hook_id' is set
        if ($web_hook_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_hook_id when calling doDelete');
        }
        
        // parse inputs
        $resourcePath = "/webhooks/{webHookId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // path params
        if ($web_hook_id !== null) {
            $resourcePath = str_replace(
                "{" . "webHookId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_hook_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\DeleteWebHookResponse',
                '/webhooks/{webHookId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\DeleteWebHookResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\DeleteWebHookResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAvailableEvents
     *
     * Returns list of available events
     *
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\EventResponse
     */
    public function getAvailableEvents()
    {
        list($response) = $this->getAvailableEventsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAvailableEventsWithHttpInfo
     *
     * Returns list of available events
     *
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\EventResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAvailableEventsWithHttpInfo()
    {
        
        // parse inputs
        $resourcePath = "/webhooks/events";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\EventResponse',
                '/webhooks/events'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\EventResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\EventResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAvailableScope
     *
     * Returns list of available scopes
     *
     * @param string $event_type Event Type (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\ScopeResponse
     */
    public function getAvailableScope($event_type)
    {
        list($response) = $this->getAvailableScopeWithHttpInfo($event_type);
        return $response;
    }

    /**
     * Operation getAvailableScopeWithHttpInfo
     *
     * Returns list of available scopes
     *
     * @param string $event_type Event Type (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\ScopeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAvailableScopeWithHttpInfo($event_type)
    {
        // verify the required parameter 'event_type' is set
        if ($event_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $event_type when calling getAvailableScope');
        }
        
        // parse inputs
        $resourcePath = "/webhooks/scopes/{eventType}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // path params
        if ($event_type !== null) {
            $resourcePath = str_replace(
                "{" . "eventType" . "}",
                $this->apiClient->getSerializer()->toPathValue($event_type),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\ScopeResponse',
                '/webhooks/scopes/{eventType}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\ScopeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\ScopeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWebHooks
     *
     * Returns registered webhooks
     *
     * @param int $web_hook_id WebHook ID to join scopes and fetch subscriptions (optional)
     * @param string $event Event - example REFUND (optional)
     * @param string $type Type to group scope codes for a WebHook (optional)
     * @param string $code Code - example amazon.fr|3 (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\WebHookResponse
     */
    public function getWebHooks($web_hook_id = null, $event = null, $type = null, $code = null)
    {
        list($response) = $this->getWebHooksWithHttpInfo($web_hook_id, $event, $type, $code);
        return $response;
    }

    /**
     * Operation getWebHooksWithHttpInfo
     *
     * Returns registered webhooks
     *
     * @param int $web_hook_id WebHook ID to join scopes and fetch subscriptions (optional)
     * @param string $event Event - example REFUND (optional)
     * @param string $type Type to group scope codes for a WebHook (optional)
     * @param string $code Code - example amazon.fr|3 (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\WebHookResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebHooksWithHttpInfo($web_hook_id = null, $event = null, $type = null, $code = null)
    {
        
        // parse inputs
        $resourcePath = "/webhooks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($web_hook_id !== null) {
            $queryParams['webHookId'] = $this->apiClient->getSerializer()->toQueryValue($web_hook_id);
        }
        // query params
        if ($event !== null) {
            $queryParams['event'] = $this->apiClient->getSerializer()->toQueryValue($event);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($code !== null) {
            $queryParams['code'] = $this->apiClient->getSerializer()->toQueryValue($code);
        }
        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\WebHookResponse',
                '/webhooks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\WebHookResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\WebHookResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateWebhooks
     *
     * Update registered webhook
     *
     * @param int $web_hook_id WebHook ID (required)
     * @param \VoloCommerce\Api\v1\Model\UpdateWebHookRequest $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\WebHookUpdateResponse
     */
    public function updateWebhooks($web_hook_id, $body = null)
    {
        list($response) = $this->updateWebhooksWithHttpInfo($web_hook_id, $body);
        return $response;
    }

    /**
     * Operation updateWebhooksWithHttpInfo
     *
     * Update registered webhook
     *
     * @param int $web_hook_id WebHook ID (required)
     * @param \VoloCommerce\Api\v1\Model\UpdateWebHookRequest $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\WebHookUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWebhooksWithHttpInfo($web_hook_id, $body = null)
    {
        // verify the required parameter 'web_hook_id' is set
        if ($web_hook_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $web_hook_id when calling updateWebhooks');
        }
        
        // parse inputs
        $resourcePath = "/webhooks/{webHookId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // path params
        if ($web_hook_id !== null) {
            $resourcePath = str_replace(
                "{" . "webHookId" . "}",
                $this->apiClient->getSerializer()->toPathValue($web_hook_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\WebHookUpdateResponse',
                '/webhooks/{webHookId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\WebHookUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\WebHookUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
