<?php
/**
 * SalesOrdersApi
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Client;

use \VoloCommerce\Api\v1\ApiClient;
use \VoloCommerce\Api\v1\ApiException;
use \VoloCommerce\Api\v1\Configuration;
use \VoloCommerce\Api\v1\ObjectSerializer;

/**
 * SalesOrdersApi Class Doc Comment
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrdersApi
{
    /**
     * API Client
     *
     * @var \VoloCommerce\Api\v1\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \VoloCommerce\Api\v1\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\VoloCommerce\Api\v1\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \VoloCommerce\Api\v1\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \VoloCommerce\Api\v1\ApiClient $apiClient set the API client
     *
     * @return SalesOrdersApi
     */
    public function setApiClient(\VoloCommerce\Api\v1\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addOrderHistories
     *
     * Add history entries/notes to sales orders
     *
     * @param \VoloCommerce\Api\v1\Model\OrderHistories $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\MessageResponse
     */
    public function addOrderHistories($body = null)
    {
        list($response) = $this->addOrderHistoriesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addOrderHistoriesWithHttpInfo
     *
     * Add history entries/notes to sales orders
     *
     * @param \VoloCommerce\Api\v1\Model\OrderHistories $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\MessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addOrderHistoriesWithHttpInfo($body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling addOrderHistories');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling addOrderHistories');
        }
        // parse inputs
        $resourcePath = "/salesOrders/histories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\MessageResponse',
                '/salesOrders/histories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\MessageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\MessageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addOrderItem
     *
     * Add Order Items for sales order
     *
     * @param int $esp_order_no EspOrderNo (required)
     * @param \VoloCommerce\Api\v1\Model\AddSalesOrderItemsRequest $body Add Sales OrderItem (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\AddOrderItemResponse
     */
    public function addOrderItem($esp_order_no, $body = null)
    {
        list($response) = $this->addOrderItemWithHttpInfo($esp_order_no, $body);
        return $response;
    }

    /**
     * Operation addOrderItemWithHttpInfo
     *
     * Add Order Items for sales order
     *
     * @param int $esp_order_no EspOrderNo (required)
     * @param \VoloCommerce\Api\v1\Model\AddSalesOrderItemsRequest $body Add Sales OrderItem (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\AddOrderItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addOrderItemWithHttpInfo($esp_order_no, $body = null)
    {
        // verify the required parameter 'esp_order_no' is set
        if ($esp_order_no === null) {
            throw new \InvalidArgumentException('Missing the required parameter $esp_order_no when calling addOrderItem');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling addOrderItem');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling addOrderItem');
        }
        // parse inputs
        $resourcePath = "/salesOrders/{espOrderNo}/orderItems";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // path params
        if ($esp_order_no !== null) {
            $resourcePath = str_replace(
                "{" . "espOrderNo" . "}",
                $this->apiClient->getSerializer()->toPathValue($esp_order_no),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\AddOrderItemResponse',
                '/salesOrders/{espOrderNo}/orderItems'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\AddOrderItemResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\AddOrderItemResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOrderItems
     *
     * Deletes order items from order
     *
     * @param int $esp_order_no EspOrderNo to fetch relevant Order (required)
     * @param int $order_item_id orderItemId to fetch relevant item (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\DeleteOrderItemsResponse
     */
    public function deleteOrderItems($esp_order_no, $order_item_id)
    {
        list($response) = $this->deleteOrderItemsWithHttpInfo($esp_order_no, $order_item_id);
        return $response;
    }

    /**
     * Operation deleteOrderItemsWithHttpInfo
     *
     * Deletes order items from order
     *
     * @param int $esp_order_no EspOrderNo to fetch relevant Order (required)
     * @param int $order_item_id orderItemId to fetch relevant item (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\DeleteOrderItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrderItemsWithHttpInfo($esp_order_no, $order_item_id)
    {
        // verify the required parameter 'esp_order_no' is set
        if ($esp_order_no === null) {
            throw new \InvalidArgumentException('Missing the required parameter $esp_order_no when calling deleteOrderItems');
        }
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $order_item_id when calling deleteOrderItems');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling deleteOrderItems');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling deleteOrderItems');
        }
        // parse inputs
        $resourcePath = "/salesOrders/{espOrderNo}/orderItems/{orderItemId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // path params
        if ($esp_order_no !== null) {
            $resourcePath = str_replace(
                "{" . "espOrderNo" . "}",
                $this->apiClient->getSerializer()->toPathValue($esp_order_no),
                $resourcePath
            );
        }
        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                "{" . "orderItemId" . "}",
                $this->apiClient->getSerializer()->toPathValue($order_item_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\DeleteOrderItemsResponse',
                '/salesOrders/{espOrderNo}/orderItems/{orderItemId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\DeleteOrderItemsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\DeleteOrderItemsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAmazonRefundReasons
     *
     * Returns a list of Amazon refund reasons
     *
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\AmazonRefundReasonResponse
     */
    public function getAmazonRefundReasons()
    {
        list($response) = $this->getAmazonRefundReasonsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAmazonRefundReasonsWithHttpInfo
     *
     * Returns a list of Amazon refund reasons
     *
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\AmazonRefundReasonResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAmazonRefundReasonsWithHttpInfo()
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getAmazonRefundReasons');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getAmazonRefundReasons');
        }
        // parse inputs
        $resourcePath = "/salesOrders/amazon/refund/reasons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\AmazonRefundReasonResponse',
                '/salesOrders/amazon/refund/reasons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\AmazonRefundReasonResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\AmazonRefundReasonResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrderCredits
     *
     * Returns array of order credits
     *
     * @param \DateTime $start_date Start date for comparison by using order creation date (optional)
     * @param \DateTime $end_date End date for comparison by using order creation date (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\OrderCreditResponse
     */
    public function getOrderCredits($start_date = null, $end_date = null)
    {
        list($response) = $this->getOrderCreditsWithHttpInfo($start_date, $end_date);
        return $response;
    }

    /**
     * Operation getOrderCreditsWithHttpInfo
     *
     * Returns array of order credits
     *
     * @param \DateTime $start_date Start date for comparison by using order creation date (optional)
     * @param \DateTime $end_date End date for comparison by using order creation date (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\OrderCreditResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderCreditsWithHttpInfo($start_date = null, $end_date = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getOrderCredits');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getOrderCredits');
        }
        // parse inputs
        $resourcePath = "/salesOrders/credits";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\OrderCreditResponse',
                '/salesOrders/credits'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\OrderCreditResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\OrderCreditResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrderHistories
     *
     * Returns order histories for given order numbers
     *
     * @param int[] $esp_order_no  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\OrderHistoryResponse
     */
    public function getOrderHistories($esp_order_no = null)
    {
        list($response) = $this->getOrderHistoriesWithHttpInfo($esp_order_no);
        return $response;
    }

    /**
     * Operation getOrderHistoriesWithHttpInfo
     *
     * Returns order histories for given order numbers
     *
     * @param int[] $esp_order_no  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\OrderHistoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderHistoriesWithHttpInfo($esp_order_no = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getOrderHistories');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getOrderHistories');
        }
        // parse inputs
        $resourcePath = "/salesOrders/histories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($esp_order_no)) {
            $esp_order_no = $this->apiClient->getSerializer()->serializeCollection($esp_order_no, 'multi', true);
        }
        if ($esp_order_no !== null) {
            $queryParams['espOrderNo'] = $this->apiClient->getSerializer()->toQueryValue($esp_order_no);
        }
        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\OrderHistoryResponse',
                '/salesOrders/histories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\OrderHistoryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\OrderHistoryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrderStatuses
     *
     * Returns List of all Sales Order Statuses
     *
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\OrderStatusResponse
     */
    public function getOrderStatuses()
    {
        list($response) = $this->getOrderStatusesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getOrderStatusesWithHttpInfo
     *
     * Returns List of all Sales Order Statuses
     *
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\OrderStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderStatusesWithHttpInfo()
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getOrderStatuses');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getOrderStatuses');
        }
        // parse inputs
        $resourcePath = "/salesOrders/statuses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\OrderStatusResponse',
                '/salesOrders/statuses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\OrderStatusResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\OrderStatusResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrders
     *
     * Returns a list of orders
     *
     * @param \DateTime $start_date Start date for comparison by using order creation date (optional)
     * @param \DateTime $end_date End date for comparison by using order creation date (optional)
     * @param string $order_source Source of the order (optional)
     * @param int $seller_id Indicates sellerId of the order (optional)
     * @param bool $paid Flag indicates the orders is paid or not (optional)
     * @param int $entries_per_page No of records in a page to be retrieved (optional)
     * @param int $page_number The Page number for pagination (optional)
     * @param string $customer_email Customer Email (optional)
     * @param bool $include_credits Include Credits? (optional)
     * @param \DateTime $start_modified_date Start date for comparison by using order update date (optional)
     * @param \DateTime $end_modified_date End date for comparison by using order update date (optional)
     * @param int $esp_order_no ESP Order Number (optional)
     * @param string $order_status Indicates status of the order (optional)
     * @param string $flag1 Order flag type 1 (optional)
     * @param string $flag2 Order flag type 2 (optional)
     * @param string $courier_name Order Courier Name (optional)
     * @param string $fulfilment_type Fulfilment Type: Valid values : \&quot;MERCHANT\&quot; OR \&quot;AMAZON_FBA\&quot; (optional)
     * @param bool $trade_sale isTradeSale? (optional)
     * @param int $supplier_id Supplier ID (optional)
     * @param string $paid_status Paid status (optional)
     * @param bool $picked Indicates picked status (optional)
     * @param int $posted_batch_id Payment postedBatch Id (optional)
     * @param bool $back_order Indicates Back Order status (optional)
     * @param string $external_order_reference External Order Reference (optional)
     * @param string $invoice_number Invoice Number (optional)
     * @param string $stock_number Stock Number (optional)
     * @param string $courier_service Courier Service (optional)
     * @param string $currency_code Currency Code (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\OrdersResponse
     */
    public function getOrders($start_date = null, $end_date = null, $order_source = null, $seller_id = null, $paid = null, $entries_per_page = null, $page_number = null, $customer_email = null, $include_credits = null, $start_modified_date = null, $end_modified_date = null, $esp_order_no = null, $order_status = null, $flag1 = null, $flag2 = null, $courier_name = null, $fulfilment_type = null, $trade_sale = null, $supplier_id = null, $paid_status = null, $picked = null, $posted_batch_id = null, $back_order = null, $external_order_reference = null, $invoice_number = null, $stock_number = null, $courier_service = null, $currency_code = null)
    {
        list($response) = $this->getOrdersWithHttpInfo($start_date, $end_date, $order_source, $seller_id, $paid, $entries_per_page, $page_number, $customer_email, $include_credits, $start_modified_date, $end_modified_date, $esp_order_no, $order_status, $flag1, $flag2, $courier_name, $fulfilment_type, $trade_sale, $supplier_id, $paid_status, $picked, $posted_batch_id, $back_order, $external_order_reference, $invoice_number, $stock_number, $courier_service, $currency_code);
        return $response;
    }

    /**
     * Operation getOrdersWithHttpInfo
     *
     * Returns a list of orders
     *
     * @param \DateTime $start_date Start date for comparison by using order creation date (optional)
     * @param \DateTime $end_date End date for comparison by using order creation date (optional)
     * @param string $order_source Source of the order (optional)
     * @param int $seller_id Indicates sellerId of the order (optional)
     * @param bool $paid Flag indicates the orders is paid or not (optional)
     * @param int $entries_per_page No of records in a page to be retrieved (optional)
     * @param int $page_number The Page number for pagination (optional)
     * @param string $customer_email Customer Email (optional)
     * @param bool $include_credits Include Credits? (optional)
     * @param \DateTime $start_modified_date Start date for comparison by using order update date (optional)
     * @param \DateTime $end_modified_date End date for comparison by using order update date (optional)
     * @param int $esp_order_no ESP Order Number (optional)
     * @param string $order_status Indicates status of the order (optional)
     * @param string $flag1 Order flag type 1 (optional)
     * @param string $flag2 Order flag type 2 (optional)
     * @param string $courier_name Order Courier Name (optional)
     * @param string $fulfilment_type Fulfilment Type: Valid values : \&quot;MERCHANT\&quot; OR \&quot;AMAZON_FBA\&quot; (optional)
     * @param bool $trade_sale isTradeSale? (optional)
     * @param int $supplier_id Supplier ID (optional)
     * @param string $paid_status Paid status (optional)
     * @param bool $picked Indicates picked status (optional)
     * @param int $posted_batch_id Payment postedBatch Id (optional)
     * @param bool $back_order Indicates Back Order status (optional)
     * @param string $external_order_reference External Order Reference (optional)
     * @param string $invoice_number Invoice Number (optional)
     * @param string $stock_number Stock Number (optional)
     * @param string $courier_service Courier Service (optional)
     * @param string $currency_code Currency Code (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\OrdersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrdersWithHttpInfo($start_date = null, $end_date = null, $order_source = null, $seller_id = null, $paid = null, $entries_per_page = null, $page_number = null, $customer_email = null, $include_credits = null, $start_modified_date = null, $end_modified_date = null, $esp_order_no = null, $order_status = null, $flag1 = null, $flag2 = null, $courier_name = null, $fulfilment_type = null, $trade_sale = null, $supplier_id = null, $paid_status = null, $picked = null, $posted_batch_id = null, $back_order = null, $external_order_reference = null, $invoice_number = null, $stock_number = null, $courier_service = null, $currency_code = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getOrders');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getOrders');
        }
        // parse inputs
        $resourcePath = "/salesOrders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = $this->apiClient->getSerializer()->toQueryValue($end_date);
        }
        // query params
        if ($order_source !== null) {
            $queryParams['orderSource'] = $this->apiClient->getSerializer()->toQueryValue($order_source);
        }
        // query params
        if ($seller_id !== null) {
            $queryParams['sellerId'] = $this->apiClient->getSerializer()->toQueryValue($seller_id);
        }
        // query params
        if ($paid !== null) {
            $queryParams['paid'] = $this->apiClient->getSerializer()->toQueryValue($paid);
        }
        // query params
        if ($entries_per_page !== null) {
            $queryParams['entriesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($entries_per_page);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($customer_email !== null) {
            $queryParams['customerEmail'] = $this->apiClient->getSerializer()->toQueryValue($customer_email);
        }
        // query params
        if ($include_credits !== null) {
            $queryParams['includeCredits'] = $this->apiClient->getSerializer()->toQueryValue($include_credits);
        }
        // query params
        if ($start_modified_date !== null) {
            $queryParams['startModifiedDate'] = $this->apiClient->getSerializer()->toQueryValue($start_modified_date);
        }
        // query params
        if ($end_modified_date !== null) {
            $queryParams['endModifiedDate'] = $this->apiClient->getSerializer()->toQueryValue($end_modified_date);
        }
        // query params
        if ($esp_order_no !== null) {
            $queryParams['espOrderNo'] = $this->apiClient->getSerializer()->toQueryValue($esp_order_no);
        }
        // query params
        if ($order_status !== null) {
            $queryParams['orderStatus'] = $this->apiClient->getSerializer()->toQueryValue($order_status);
        }
        // query params
        if ($flag1 !== null) {
            $queryParams['flag1'] = $this->apiClient->getSerializer()->toQueryValue($flag1);
        }
        // query params
        if ($flag2 !== null) {
            $queryParams['flag2'] = $this->apiClient->getSerializer()->toQueryValue($flag2);
        }
        // query params
        if ($courier_name !== null) {
            $queryParams['courierName'] = $this->apiClient->getSerializer()->toQueryValue($courier_name);
        }
        // query params
        if ($fulfilment_type !== null) {
            $queryParams['fulfilmentType'] = $this->apiClient->getSerializer()->toQueryValue($fulfilment_type);
        }
        // query params
        if ($trade_sale !== null) {
            $queryParams['tradeSale'] = $this->apiClient->getSerializer()->toQueryValue($trade_sale);
        }
        // query params
        if ($supplier_id !== null) {
            $queryParams['supplierId'] = $this->apiClient->getSerializer()->toQueryValue($supplier_id);
        }
        // query params
        if ($paid_status !== null) {
            $queryParams['paidStatus'] = $this->apiClient->getSerializer()->toQueryValue($paid_status);
        }
        // query params
        if ($picked !== null) {
            $queryParams['picked'] = $this->apiClient->getSerializer()->toQueryValue($picked);
        }
        // query params
        if ($posted_batch_id !== null) {
            $queryParams['postedBatchId'] = $this->apiClient->getSerializer()->toQueryValue($posted_batch_id);
        }
        // query params
        if ($back_order !== null) {
            $queryParams['backOrder'] = $this->apiClient->getSerializer()->toQueryValue($back_order);
        }
        // query params
        if ($external_order_reference !== null) {
            $queryParams['externalOrderReference'] = $this->apiClient->getSerializer()->toQueryValue($external_order_reference);
        }
        // query params
        if ($invoice_number !== null) {
            $queryParams['invoiceNumber'] = $this->apiClient->getSerializer()->toQueryValue($invoice_number);
        }
        // query params
        if ($stock_number !== null) {
            $queryParams['stockNumber'] = $this->apiClient->getSerializer()->toQueryValue($stock_number);
        }
        // query params
        if ($courier_service !== null) {
            $queryParams['courierService'] = $this->apiClient->getSerializer()->toQueryValue($courier_service);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['currencyCode'] = $this->apiClient->getSerializer()->toQueryValue($currency_code);
        }
        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\OrdersResponse',
                '/salesOrders'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\OrdersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\OrdersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSalesOrderFlags
     *
     * Returns List Sales order flags
     *
     * @param string $flag_type Flag Type (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\FlagsResponse
     */
    public function getSalesOrderFlags($flag_type)
    {
        list($response) = $this->getSalesOrderFlagsWithHttpInfo($flag_type);
        return $response;
    }

    /**
     * Operation getSalesOrderFlagsWithHttpInfo
     *
     * Returns List Sales order flags
     *
     * @param string $flag_type Flag Type (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\FlagsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSalesOrderFlagsWithHttpInfo($flag_type)
    {
        // verify the required parameter 'flag_type' is set
        if ($flag_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flag_type when calling getSalesOrderFlags');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getSalesOrderFlags');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getSalesOrderFlags');
        }
        // parse inputs
        $resourcePath = "/salesOrders/flags/{flagType}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // path params
        if ($flag_type !== null) {
            $resourcePath = str_replace(
                "{" . "flagType" . "}",
                $this->apiClient->getSerializer()->toPathValue($flag_type),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\FlagsResponse',
                '/salesOrders/flags/{flagType}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\FlagsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\FlagsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSellerIds
     *
     * Returns a list of seller ids
     *
     * @param int $id Id to fetch relevant sellers (optional)
     * @param string $source Source - possible values are WWW,Amazon,Ebay,Manual,Marketplace (optional)
     * @param string $seller_name Seller name to compare and fetch seller details (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\SellerIdResponse
     */
    public function getSellerIds($id = null, $source = null, $seller_name = null)
    {
        list($response) = $this->getSellerIdsWithHttpInfo($id, $source, $seller_name);
        return $response;
    }

    /**
     * Operation getSellerIdsWithHttpInfo
     *
     * Returns a list of seller ids
     *
     * @param int $id Id to fetch relevant sellers (optional)
     * @param string $source Source - possible values are WWW,Amazon,Ebay,Manual,Marketplace (optional)
     * @param string $seller_name Seller name to compare and fetch seller details (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\SellerIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSellerIdsWithHttpInfo($id = null, $source = null, $seller_name = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getSellerIds');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getSellerIds');
        }
        // parse inputs
        $resourcePath = "/salesOrders/sellers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($source !== null) {
            $queryParams['source'] = $this->apiClient->getSerializer()->toQueryValue($source);
        }
        // query params
        if ($seller_name !== null) {
            $queryParams['sellerName'] = $this->apiClient->getSerializer()->toQueryValue($seller_name);
        }
        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\SellerIdResponse',
                '/salesOrders/sellers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\SellerIdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\SellerIdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStockActions
     *
     * Returns stock actions to process refunds
     *
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\StockActionsResultBean
     */
    public function getStockActions()
    {
        list($response) = $this->getStockActionsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getStockActionsWithHttpInfo
     *
     * Returns stock actions to process refunds
     *
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\StockActionsResultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStockActionsWithHttpInfo()
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getStockActions');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getStockActions');
        }
        // parse inputs
        $resourcePath = "/salesOrders/refund/stockActions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\StockActionsResultBean',
                '/salesOrders/refund/stockActions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\StockActionsResultBean', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\StockActionsResultBean', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation issueRefund
     *
     * Issue Refund
     *
     * @param int $esp_order_no  (required)
     * @param \VoloCommerce\Api\v1\Model\IssueRefundParams $body Issue refund params (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\SalesOrdersRefundResponseDTO
     */
    public function issueRefund($esp_order_no, $body = null)
    {
        list($response) = $this->issueRefundWithHttpInfo($esp_order_no, $body);
        return $response;
    }

    /**
     * Operation issueRefundWithHttpInfo
     *
     * Issue Refund
     *
     * @param int $esp_order_no  (required)
     * @param \VoloCommerce\Api\v1\Model\IssueRefundParams $body Issue refund params (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\SalesOrdersRefundResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function issueRefundWithHttpInfo($esp_order_no, $body = null)
    {
        // verify the required parameter 'esp_order_no' is set
        if ($esp_order_no === null) {
            throw new \InvalidArgumentException('Missing the required parameter $esp_order_no when calling issueRefund');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling issueRefund');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling issueRefund');
        }
        // parse inputs
        $resourcePath = "/salesOrders/{espOrderNo}/refund";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // path params
        if ($esp_order_no !== null) {
            $resourcePath = str_replace(
                "{" . "espOrderNo" . "}",
                $this->apiClient->getSerializer()->toPathValue($esp_order_no),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\SalesOrdersRefundResponseDTO',
                '/salesOrders/{espOrderNo}/refund'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\SalesOrdersRefundResponseDTO', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\SalesOrdersRefundResponseDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation saveOrders
     *
     * Create orders within Volo
     *
     * @param \VoloCommerce\Api\v1\Model\AddSalesOrdersBean $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\AddOrderResponse
     */
    public function saveOrders($body = null)
    {
        list($response) = $this->saveOrdersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation saveOrdersWithHttpInfo
     *
     * Create orders within Volo
     *
     * @param \VoloCommerce\Api\v1\Model\AddSalesOrdersBean $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\AddOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveOrdersWithHttpInfo($body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling saveOrders');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling saveOrders');
        }
        // parse inputs
        $resourcePath = "/salesOrders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\AddOrderResponse',
                '/salesOrders'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\AddOrderResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\AddOrderResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation savePayment
     *
     * Payment details for SalesOrder within Volo
     *
     * @param int $esp_order_no EspOrderNo (required)
     * @param \VoloCommerce\Api\v1\Model\CreateSalesOrderPaymentBean $body Payment details for SalesOrder (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\CreateSalesOrderPaymentResponse
     */
    public function savePayment($esp_order_no, $body = null)
    {
        list($response) = $this->savePaymentWithHttpInfo($esp_order_no, $body);
        return $response;
    }

    /**
     * Operation savePaymentWithHttpInfo
     *
     * Payment details for SalesOrder within Volo
     *
     * @param int $esp_order_no EspOrderNo (required)
     * @param \VoloCommerce\Api\v1\Model\CreateSalesOrderPaymentBean $body Payment details for SalesOrder (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\CreateSalesOrderPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function savePaymentWithHttpInfo($esp_order_no, $body = null)
    {
        // verify the required parameter 'esp_order_no' is set
        if ($esp_order_no === null) {
            throw new \InvalidArgumentException('Missing the required parameter $esp_order_no when calling savePayment');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling savePayment');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling savePayment');
        }
        // parse inputs
        $resourcePath = "/salesOrders/{espOrderNo}/payments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // path params
        if ($esp_order_no !== null) {
            $resourcePath = str_replace(
                "{" . "espOrderNo" . "}",
                $this->apiClient->getSerializer()->toPathValue($esp_order_no),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\CreateSalesOrderPaymentResponse',
                '/salesOrders/{espOrderNo}/payments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\CreateSalesOrderPaymentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\CreateSalesOrderPaymentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateOrderItems
     *
     * Update to an order Item
     *
     * @param int $esp_order_no EspOrderNo to fetch relevant Order (required)
     * @param \VoloCommerce\Api\v1\Model\ItemUpdateInputList $body list of updated items (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\UpdateOrderItemsResponse
     */
    public function updateOrderItems($esp_order_no, $body = null)
    {
        list($response) = $this->updateOrderItemsWithHttpInfo($esp_order_no, $body);
        return $response;
    }

    /**
     * Operation updateOrderItemsWithHttpInfo
     *
     * Update to an order Item
     *
     * @param int $esp_order_no EspOrderNo to fetch relevant Order (required)
     * @param \VoloCommerce\Api\v1\Model\ItemUpdateInputList $body list of updated items (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\UpdateOrderItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrderItemsWithHttpInfo($esp_order_no, $body = null)
    {
        // verify the required parameter 'esp_order_no' is set
        if ($esp_order_no === null) {
            throw new \InvalidArgumentException('Missing the required parameter $esp_order_no when calling updateOrderItems');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling updateOrderItems');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling updateOrderItems');
        }
        // parse inputs
        $resourcePath = "/salesOrders/{espOrderNo}/orderItems";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // path params
        if ($esp_order_no !== null) {
            $resourcePath = str_replace(
                "{" . "espOrderNo" . "}",
                $this->apiClient->getSerializer()->toPathValue($esp_order_no),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\UpdateOrderItemsResponse',
                '/salesOrders/{espOrderNo}/orderItems'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\UpdateOrderItemsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\UpdateOrderItemsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateOrders
     *
     * Update order details
     *
     * @param \VoloCommerce\Api\v1\Model\UpdateSalesOrdersBean $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\MessageResponse
     */
    public function updateOrders($body = null)
    {
        list($response) = $this->updateOrdersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateOrdersWithHttpInfo
     *
     * Update order details
     *
     * @param \VoloCommerce\Api\v1\Model\UpdateSalesOrdersBean $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\MessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrdersWithHttpInfo($body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling updateOrders');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling updateOrders');
        }
        // parse inputs
        $resourcePath = "/salesOrders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\MessageResponse',
                '/salesOrders'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\MessageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\MessageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateOrdersAsync
     *
     * Updates order details
     *
     * @param \VoloCommerce\Api\v1\Model\UpdateSalesOrderAsyncBean $body List of IncomingOrdersUpdate to update (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\UpdateAsyncResponse
     */
    public function updateOrdersAsync($body = null)
    {
        list($response) = $this->updateOrdersAsyncWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateOrdersAsyncWithHttpInfo
     *
     * Updates order details
     *
     * @param \VoloCommerce\Api\v1\Model\UpdateSalesOrderAsyncBean $body List of IncomingOrdersUpdate to update (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\UpdateAsyncResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrdersAsyncWithHttpInfo($body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling updateOrdersAsync');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling updateOrdersAsync');
        }
        // parse inputs
        $resourcePath = "/salesOrders/async";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\UpdateAsyncResponse',
                '/salesOrders/async'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\UpdateAsyncResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\UpdateAsyncResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSalesOrderPayment
     *
     * Update payment details of sales order
     *
     * @param int $esp_order_no EspOrderNo (required)
     * @param int $payment_id Id of PaymentTransactions (required)
     * @param \VoloCommerce\Api\v1\Model\UpdateSalesOrderPaymentRequest $body Update payment detail of salesorder (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\UpdateSalesOrderPaymentResponse
     */
    public function updateSalesOrderPayment($esp_order_no, $payment_id, $body = null)
    {
        list($response) = $this->updateSalesOrderPaymentWithHttpInfo($esp_order_no, $payment_id, $body);
        return $response;
    }

    /**
     * Operation updateSalesOrderPaymentWithHttpInfo
     *
     * Update payment details of sales order
     *
     * @param int $esp_order_no EspOrderNo (required)
     * @param int $payment_id Id of PaymentTransactions (required)
     * @param \VoloCommerce\Api\v1\Model\UpdateSalesOrderPaymentRequest $body Update payment detail of salesorder (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\UpdateSalesOrderPaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSalesOrderPaymentWithHttpInfo($esp_order_no, $payment_id, $body = null)
    {
        // verify the required parameter 'esp_order_no' is set
        if ($esp_order_no === null) {
            throw new \InvalidArgumentException('Missing the required parameter $esp_order_no when calling updateSalesOrderPayment');
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payment_id when calling updateSalesOrderPayment');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling updateSalesOrderPayment');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling updateSalesOrderPayment');
        }
        // parse inputs
        $resourcePath = "/salesOrders/{espOrderNo}/payments/{paymentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // path params
        if ($esp_order_no !== null) {
            $resourcePath = str_replace(
                "{" . "espOrderNo" . "}",
                $this->apiClient->getSerializer()->toPathValue($esp_order_no),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                "{" . "paymentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($payment_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\UpdateSalesOrderPaymentResponse',
                '/salesOrders/{espOrderNo}/payments/{paymentId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\UpdateSalesOrderPaymentResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\UpdateSalesOrderPaymentResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
