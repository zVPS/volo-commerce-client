<?php
/**
 * SuppliersApi
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Client;

use \VoloCommerce\Api\v1\ApiClient;
use \VoloCommerce\Api\v1\ApiException;
use \VoloCommerce\Api\v1\Configuration;
use \VoloCommerce\Api\v1\ObjectSerializer;

/**
 * SuppliersApi Class Doc Comment
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SuppliersApi
{
    /**
     * API Client
     *
     * @var \VoloCommerce\Api\v1\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \VoloCommerce\Api\v1\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\VoloCommerce\Api\v1\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \VoloCommerce\Api\v1\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \VoloCommerce\Api\v1\ApiClient $apiClient set the API client
     *
     * @return SuppliersApi
     */
    public function setApiClient(\VoloCommerce\Api\v1\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation doUpdate
     *
     * Update Supplier
     *
     * @param \VoloCommerce\Api\v1\Model\UpdateSupplier $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\AddUpdatedSupplierResponse
     */
    public function doUpdate($body = null)
    {
        list($response) = $this->doUpdateWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation doUpdateWithHttpInfo
     *
     * Update Supplier
     *
     * @param \VoloCommerce\Api\v1\Model\UpdateSupplier $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\AddUpdatedSupplierResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function doUpdateWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/suppliers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\AddUpdatedSupplierResponse',
                '/suppliers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\AddUpdatedSupplierResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\AddUpdatedSupplierResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSuppliers
     *
     * Returns a list of suppliers
     *
     * @param int $id Indicates id of the supplier (optional)
     * @param string $supplier_code Indicates supplierCode of the supplier (optional)
     * @param string $supplier_reference Indicates supplierReference of the supplier (optional)
     * @param string $name Indicates name of the supplier (optional)
     * @param string $vat_number Indicates vatNumber of the supplier (optional)
     * @param string $company_reg_number Indicates companyRegNumber of the supplier (optional)
     * @param string $phone Indicates phone of the supplier (optional)
     * @param string $fax Indicates fax of the supplier (optional)
     * @param string $email Indicates email of the supplier (optional)
     * @param string $contact Indicates contact of the supplier (optional)
     * @param \DateTime $start_modified_date Start date for comparison by using supplier creation date (optional)
     * @param \DateTime $end_modified_date End date for comparison by using supplier creation date (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\SuppliersResponse
     */
    public function getSuppliers($id = null, $supplier_code = null, $supplier_reference = null, $name = null, $vat_number = null, $company_reg_number = null, $phone = null, $fax = null, $email = null, $contact = null, $start_modified_date = null, $end_modified_date = null)
    {
        list($response) = $this->getSuppliersWithHttpInfo($id, $supplier_code, $supplier_reference, $name, $vat_number, $company_reg_number, $phone, $fax, $email, $contact, $start_modified_date, $end_modified_date);
        return $response;
    }

    /**
     * Operation getSuppliersWithHttpInfo
     *
     * Returns a list of suppliers
     *
     * @param int $id Indicates id of the supplier (optional)
     * @param string $supplier_code Indicates supplierCode of the supplier (optional)
     * @param string $supplier_reference Indicates supplierReference of the supplier (optional)
     * @param string $name Indicates name of the supplier (optional)
     * @param string $vat_number Indicates vatNumber of the supplier (optional)
     * @param string $company_reg_number Indicates companyRegNumber of the supplier (optional)
     * @param string $phone Indicates phone of the supplier (optional)
     * @param string $fax Indicates fax of the supplier (optional)
     * @param string $email Indicates email of the supplier (optional)
     * @param string $contact Indicates contact of the supplier (optional)
     * @param \DateTime $start_modified_date Start date for comparison by using supplier creation date (optional)
     * @param \DateTime $end_modified_date End date for comparison by using supplier creation date (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\SuppliersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuppliersWithHttpInfo($id = null, $supplier_code = null, $supplier_reference = null, $name = null, $vat_number = null, $company_reg_number = null, $phone = null, $fax = null, $email = null, $contact = null, $start_modified_date = null, $end_modified_date = null)
    {
        
        // parse inputs
        $resourcePath = "/suppliers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if ($supplier_code !== null) {
            $queryParams['supplierCode'] = $this->apiClient->getSerializer()->toQueryValue($supplier_code);
        }
        // query params
        if ($supplier_reference !== null) {
            $queryParams['supplierReference'] = $this->apiClient->getSerializer()->toQueryValue($supplier_reference);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($vat_number !== null) {
            $queryParams['vatNumber'] = $this->apiClient->getSerializer()->toQueryValue($vat_number);
        }
        // query params
        if ($company_reg_number !== null) {
            $queryParams['companyRegNumber'] = $this->apiClient->getSerializer()->toQueryValue($company_reg_number);
        }
        // query params
        if ($phone !== null) {
            $queryParams['phone'] = $this->apiClient->getSerializer()->toQueryValue($phone);
        }
        // query params
        if ($fax !== null) {
            $queryParams['fax'] = $this->apiClient->getSerializer()->toQueryValue($fax);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params
        if ($contact !== null) {
            $queryParams['contact'] = $this->apiClient->getSerializer()->toQueryValue($contact);
        }
        // query params
        if ($start_modified_date !== null) {
            $queryParams['startModifiedDate'] = $this->apiClient->getSerializer()->toQueryValue($start_modified_date);
        }
        // query params
        if ($end_modified_date !== null) {
            $queryParams['endModifiedDate'] = $this->apiClient->getSerializer()->toQueryValue($end_modified_date);
        }
        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\SuppliersResponse',
                '/suppliers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\SuppliersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\SuppliersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeSupplier
     *
     * Delete the supplier
     *
     * @param int $supplier_id Supplier id (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\DeleteSupplierResponse
     */
    public function removeSupplier($supplier_id)
    {
        list($response) = $this->removeSupplierWithHttpInfo($supplier_id);
        return $response;
    }

    /**
     * Operation removeSupplierWithHttpInfo
     *
     * Delete the supplier
     *
     * @param int $supplier_id Supplier id (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\DeleteSupplierResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeSupplierWithHttpInfo($supplier_id)
    {
        // verify the required parameter 'supplier_id' is set
        if ($supplier_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $supplier_id when calling removeSupplier');
        }
        
        // parse inputs
        $resourcePath = "/suppliers/{supplierId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // path params
        if ($supplier_id !== null) {
            $resourcePath = str_replace(
                "{" . "supplierId" . "}",
                $this->apiClient->getSerializer()->toPathValue($supplier_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\DeleteSupplierResponse',
                '/suppliers/{supplierId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\DeleteSupplierResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\DeleteSupplierResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation saveSupplier
     *
     * Add a list of suppliers
     *
     * @param \VoloCommerce\Api\v1\Model\AddSuppliers $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\SupplierResponseBeanList
     */
    public function saveSupplier($body = null)
    {
        list($response) = $this->saveSupplierWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation saveSupplierWithHttpInfo
     *
     * Add a list of suppliers
     *
     * @param \VoloCommerce\Api\v1\Model\AddSuppliers $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\SupplierResponseBeanList, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveSupplierWithHttpInfo($body = null)
    {
        
        // parse inputs
        $resourcePath = "/suppliers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        $authToken = $this->apiClient->getApiKeyWithPrefix('Authorization');
        $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authToken);
        // header params
        $accessToken = $this->apiClient->getConfig()->getAccessToken();
        $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($accessToken);
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\SupplierResponseBeanList',
                '/suppliers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\SupplierResponseBeanList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\SupplierResponseBeanList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
