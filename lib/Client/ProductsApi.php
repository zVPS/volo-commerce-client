<?php
/**
 * ProductsApi
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Client;

use \VoloCommerce\Api\v1\ApiClient;
use \VoloCommerce\Api\v1\ApiException;
use \VoloCommerce\Api\v1\Configuration;
use \VoloCommerce\Api\v1\ObjectSerializer;

/**
 * ProductsApi Class Doc Comment
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductsApi
{
    /**
     * API Client
     *
     * @var \VoloCommerce\Api\v1\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \VoloCommerce\Api\v1\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\VoloCommerce\Api\v1\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \VoloCommerce\Api\v1\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \VoloCommerce\Api\v1\ApiClient $apiClient set the API client
     *
     * @return ProductsApi
     */
    public function setApiClient(\VoloCommerce\Api\v1\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getAllExportableFields
     *
     * Returns a list of Exportable Fields
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\ProductPriceNamesResponse
     */
    public function getAllExportableFields($authorization, $x_api_key)
    {
        list($response) = $this->getAllExportableFieldsWithHttpInfo($authorization, $x_api_key);
        return $response;
    }

    /**
     * Operation getAllExportableFieldsWithHttpInfo
     *
     * Returns a list of Exportable Fields
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\ProductPriceNamesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllExportableFieldsWithHttpInfo($authorization, $x_api_key)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getAllExportableFields');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getAllExportableFields');
        }
        // parse inputs
        $resourcePath = "/products/fieldNames";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\ProductPriceNamesResponse',
                '/products/fieldNames'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\ProductPriceNamesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\ProductPriceNamesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCourierName
     *
     * Returns the courier name used on eBay template for products
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\EbayCourierNameResponse
     */
    public function getCourierName($authorization, $x_api_key, $stock_number = null)
    {
        list($response) = $this->getCourierNameWithHttpInfo($authorization, $x_api_key, $stock_number);
        return $response;
    }

    /**
     * Operation getCourierNameWithHttpInfo
     *
     * Returns the courier name used on eBay template for products
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\EbayCourierNameResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCourierNameWithHttpInfo($authorization, $x_api_key, $stock_number = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getCourierName');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getCourierName');
        }
        // parse inputs
        $resourcePath = "/products/ebay/courierNames";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($stock_number !== null) {
            $queryParams['stockNumber'] = $this->apiClient->getSerializer()->toQueryValue($stock_number);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\EbayCourierNameResponse',
                '/products/ebay/courierNames'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\EbayCourierNameResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\EbayCourierNameResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getInventoryFlags
     *
     * Returns a list of inventory flags
     *
     * @param string $flag_type Flag Type (required)
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\FlagsResponse
     */
    public function getInventoryFlags($flag_type, $authorization, $x_api_key)
    {
        list($response) = $this->getInventoryFlagsWithHttpInfo($flag_type, $authorization, $x_api_key);
        return $response;
    }

    /**
     * Operation getInventoryFlagsWithHttpInfo
     *
     * Returns a list of inventory flags
     *
     * @param string $flag_type Flag Type (required)
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\FlagsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInventoryFlagsWithHttpInfo($flag_type, $authorization, $x_api_key)
    {
        // verify the required parameter 'flag_type' is set
        if ($flag_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $flag_type when calling getInventoryFlags');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getInventoryFlags');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getInventoryFlags');
        }
        // parse inputs
        $resourcePath = "/products/flags/{flagType}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // path params
        if ($flag_type !== null) {
            $resourcePath = str_replace(
                "{" . "flagType" . "}",
                $this->apiClient->getSerializer()->toPathValue($flag_type),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\FlagsResponse',
                '/products/flags/{flagType}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\FlagsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\FlagsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPartialProducts
     *
     * Returns smaller standard set of product data
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number Stock Number (optional)
     * @param string $isbn ISBN (optional)
     * @param string $upc UPC (optional)
     * @param string $title Product Title (optional)
     * @param string $list_on list on (optional)
     * @param int $on_hand_qty1 On Hand Quantity 1 (optional)
     * @param int $on_hand_qty2 On Hand Quantity 2 (optional)
     * @param string $on_hand_comparator On Hand Comparator (optional)
     * @param int $available_qty1 Available Quantity 1 (optional)
     * @param int $available_qty2 Available Quantity 2 (optional)
     * @param string $available_comparator Available Comparator (optional)
     * @param string $status Product Status (optional)
     * @param int $supplier_id Supplier ID (optional)
     * @param bool $is_drop_ship Is Dropship item? (optional)
     * @param int $page_number Page number (optional)
     * @param int $entries_per_page No of entries per page (optional)
     * @param bool $exclude_listing_sk_us Exclude Listing SKUs? (optional)
     * @param bool $discontinued Product discontinued? (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\PartialProductResult
     */
    public function getPartialProducts($authorization, $x_api_key, $stock_number = null, $isbn = null, $upc = null, $title = null, $list_on = null, $on_hand_qty1 = null, $on_hand_qty2 = null, $on_hand_comparator = null, $available_qty1 = null, $available_qty2 = null, $available_comparator = null, $status = null, $supplier_id = null, $is_drop_ship = null, $page_number = null, $entries_per_page = null, $exclude_listing_sk_us = null, $discontinued = null)
    {
        list($response) = $this->getPartialProductsWithHttpInfo($authorization, $x_api_key, $stock_number, $isbn, $upc, $title, $list_on, $on_hand_qty1, $on_hand_qty2, $on_hand_comparator, $available_qty1, $available_qty2, $available_comparator, $status, $supplier_id, $is_drop_ship, $page_number, $entries_per_page, $exclude_listing_sk_us, $discontinued);
        return $response;
    }

    /**
     * Operation getPartialProductsWithHttpInfo
     *
     * Returns smaller standard set of product data
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number Stock Number (optional)
     * @param string $isbn ISBN (optional)
     * @param string $upc UPC (optional)
     * @param string $title Product Title (optional)
     * @param string $list_on list on (optional)
     * @param int $on_hand_qty1 On Hand Quantity 1 (optional)
     * @param int $on_hand_qty2 On Hand Quantity 2 (optional)
     * @param string $on_hand_comparator On Hand Comparator (optional)
     * @param int $available_qty1 Available Quantity 1 (optional)
     * @param int $available_qty2 Available Quantity 2 (optional)
     * @param string $available_comparator Available Comparator (optional)
     * @param string $status Product Status (optional)
     * @param int $supplier_id Supplier ID (optional)
     * @param bool $is_drop_ship Is Dropship item? (optional)
     * @param int $page_number Page number (optional)
     * @param int $entries_per_page No of entries per page (optional)
     * @param bool $exclude_listing_sk_us Exclude Listing SKUs? (optional)
     * @param bool $discontinued Product discontinued? (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\PartialProductResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPartialProductsWithHttpInfo($authorization, $x_api_key, $stock_number = null, $isbn = null, $upc = null, $title = null, $list_on = null, $on_hand_qty1 = null, $on_hand_qty2 = null, $on_hand_comparator = null, $available_qty1 = null, $available_qty2 = null, $available_comparator = null, $status = null, $supplier_id = null, $is_drop_ship = null, $page_number = null, $entries_per_page = null, $exclude_listing_sk_us = null, $discontinued = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getPartialProducts');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getPartialProducts');
        }
        // parse inputs
        $resourcePath = "/products/partial";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($stock_number !== null) {
            $queryParams['stockNumber'] = $this->apiClient->getSerializer()->toQueryValue($stock_number);
        }
        // query params
        if ($isbn !== null) {
            $queryParams['isbn'] = $this->apiClient->getSerializer()->toQueryValue($isbn);
        }
        // query params
        if ($upc !== null) {
            $queryParams['upc'] = $this->apiClient->getSerializer()->toQueryValue($upc);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = $this->apiClient->getSerializer()->toQueryValue($title);
        }
        // query params
        if ($list_on !== null) {
            $queryParams['listOn'] = $this->apiClient->getSerializer()->toQueryValue($list_on);
        }
        // query params
        if ($on_hand_qty1 !== null) {
            $queryParams['onHandQty1'] = $this->apiClient->getSerializer()->toQueryValue($on_hand_qty1);
        }
        // query params
        if ($on_hand_qty2 !== null) {
            $queryParams['onHandQty2'] = $this->apiClient->getSerializer()->toQueryValue($on_hand_qty2);
        }
        // query params
        if ($on_hand_comparator !== null) {
            $queryParams['onHandComparator'] = $this->apiClient->getSerializer()->toQueryValue($on_hand_comparator);
        }
        // query params
        if ($available_qty1 !== null) {
            $queryParams['availableQty1'] = $this->apiClient->getSerializer()->toQueryValue($available_qty1);
        }
        // query params
        if ($available_qty2 !== null) {
            $queryParams['availableQty2'] = $this->apiClient->getSerializer()->toQueryValue($available_qty2);
        }
        // query params
        if ($available_comparator !== null) {
            $queryParams['availableComparator'] = $this->apiClient->getSerializer()->toQueryValue($available_comparator);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($supplier_id !== null) {
            $queryParams['supplierId'] = $this->apiClient->getSerializer()->toQueryValue($supplier_id);
        }
        // query params
        if ($is_drop_ship !== null) {
            $queryParams['isDropShip'] = $this->apiClient->getSerializer()->toQueryValue($is_drop_ship);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($entries_per_page !== null) {
            $queryParams['entriesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($entries_per_page);
        }
        // query params
        if ($exclude_listing_sk_us !== null) {
            $queryParams['excludeListingSKUs'] = $this->apiClient->getSerializer()->toQueryValue($exclude_listing_sk_us);
        }
        // query params
        if ($discontinued !== null) {
            $queryParams['discontinued'] = $this->apiClient->getSerializer()->toQueryValue($discontinued);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\PartialProductResult',
                '/products/partial'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\PartialProductResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\PartialProductResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductImages
     *
     * Returns a list of Product Image
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number Stock Number (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\ProductImageResponse
     */
    public function getProductImages($authorization, $x_api_key, $stock_number = null)
    {
        list($response) = $this->getProductImagesWithHttpInfo($authorization, $x_api_key, $stock_number);
        return $response;
    }

    /**
     * Operation getProductImagesWithHttpInfo
     *
     * Returns a list of Product Image
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number Stock Number (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\ProductImageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductImagesWithHttpInfo($authorization, $x_api_key, $stock_number = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getProductImages');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getProductImages');
        }
        // parse inputs
        $resourcePath = "/products/images";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($stock_number !== null) {
            $queryParams['stockNumber'] = $this->apiClient->getSerializer()->toQueryValue($stock_number);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\ProductImageResponse',
                '/products/images'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\ProductImageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\ProductImageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductPriceNames
     *
     * Returns a list of Product Price Names
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\ProductPriceNamesResponse
     */
    public function getProductPriceNames($authorization, $x_api_key)
    {
        list($response) = $this->getProductPriceNamesWithHttpInfo($authorization, $x_api_key);
        return $response;
    }

    /**
     * Operation getProductPriceNamesWithHttpInfo
     *
     * Returns a list of Product Price Names
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\ProductPriceNamesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductPriceNamesWithHttpInfo($authorization, $x_api_key)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getProductPriceNames');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getProductPriceNames');
        }
        // parse inputs
        $resourcePath = "/products/priceLevels";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\ProductPriceNamesResponse',
                '/products/priceLevels'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\ProductPriceNamesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\ProductPriceNamesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductPrices
     *
     * Returns a list of Product Image
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number Stock Number (optional)
     * @param string $currency Currency (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\ProductPriceResponse
     */
    public function getProductPrices($authorization, $x_api_key, $stock_number = null, $currency = null)
    {
        list($response) = $this->getProductPricesWithHttpInfo($authorization, $x_api_key, $stock_number, $currency);
        return $response;
    }

    /**
     * Operation getProductPricesWithHttpInfo
     *
     * Returns a list of Product Image
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number Stock Number (optional)
     * @param string $currency Currency (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\ProductPriceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductPricesWithHttpInfo($authorization, $x_api_key, $stock_number = null, $currency = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getProductPrices');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getProductPrices');
        }
        // parse inputs
        $resourcePath = "/products/prices";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($stock_number !== null) {
            $queryParams['stockNumber'] = $this->apiClient->getSerializer()->toQueryValue($stock_number);
        }
        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\ProductPriceResponse',
                '/products/prices'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\ProductPriceResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\ProductPriceResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProducts
     *
     * Returns standard set of product data for products matching given search criteria
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number Stock Number (optional)
     * @param string $isbn ISBN (optional)
     * @param string $upc UPC (optional)
     * @param string $title Product Title (optional)
     * @param string $list_on list on (optional)
     * @param int $on_hand_qty1 On Hand Quantity 1 (optional)
     * @param int $on_hand_qty2 On Hand Quantity 2 (optional)
     * @param string $on_hand_comparator On Hand Comparator (optional)
     * @param string $status Product Status (optional)
     * @param int $supplier_id Supplier ID (optional)
     * @param bool $is_drop_ship Is Dropship item? (optional)
     * @param int $page_number Page number (optional)
     * @param int $entries_per_page No of entries per page (optional)
     * @param bool $exclude_listing_sk_us Exclude Listing SKUs? (optional)
     * @param bool $discontinued Product discontinued? (optional)
     * @param bool $description Description needed? (optional)
     * @param bool $description2 Description2 needed? (optional)
     * @param bool $description3 Description3 needed? (optional)
     * @param bool $description4 Description4 needed? (optional)
     * @param bool $description5 Description5 needed? (optional)
     * @param string $supplier_sku Supplier SKU (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\ProductResultBean
     */
    public function getProducts($authorization, $x_api_key, $stock_number = null, $isbn = null, $upc = null, $title = null, $list_on = null, $on_hand_qty1 = null, $on_hand_qty2 = null, $on_hand_comparator = null, $status = null, $supplier_id = null, $is_drop_ship = null, $page_number = null, $entries_per_page = null, $exclude_listing_sk_us = null, $discontinued = null, $description = null, $description2 = null, $description3 = null, $description4 = null, $description5 = null, $supplier_sku = null)
    {
        list($response) = $this->getProductsWithHttpInfo($authorization, $x_api_key, $stock_number, $isbn, $upc, $title, $list_on, $on_hand_qty1, $on_hand_qty2, $on_hand_comparator, $status, $supplier_id, $is_drop_ship, $page_number, $entries_per_page, $exclude_listing_sk_us, $discontinued, $description, $description2, $description3, $description4, $description5, $supplier_sku);
        return $response;
    }

    /**
     * Operation getProductsWithHttpInfo
     *
     * Returns standard set of product data for products matching given search criteria
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number Stock Number (optional)
     * @param string $isbn ISBN (optional)
     * @param string $upc UPC (optional)
     * @param string $title Product Title (optional)
     * @param string $list_on list on (optional)
     * @param int $on_hand_qty1 On Hand Quantity 1 (optional)
     * @param int $on_hand_qty2 On Hand Quantity 2 (optional)
     * @param string $on_hand_comparator On Hand Comparator (optional)
     * @param string $status Product Status (optional)
     * @param int $supplier_id Supplier ID (optional)
     * @param bool $is_drop_ship Is Dropship item? (optional)
     * @param int $page_number Page number (optional)
     * @param int $entries_per_page No of entries per page (optional)
     * @param bool $exclude_listing_sk_us Exclude Listing SKUs? (optional)
     * @param bool $discontinued Product discontinued? (optional)
     * @param bool $description Description needed? (optional)
     * @param bool $description2 Description2 needed? (optional)
     * @param bool $description3 Description3 needed? (optional)
     * @param bool $description4 Description4 needed? (optional)
     * @param bool $description5 Description5 needed? (optional)
     * @param string $supplier_sku Supplier SKU (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\ProductResultBean, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductsWithHttpInfo($authorization, $x_api_key, $stock_number = null, $isbn = null, $upc = null, $title = null, $list_on = null, $on_hand_qty1 = null, $on_hand_qty2 = null, $on_hand_comparator = null, $status = null, $supplier_id = null, $is_drop_ship = null, $page_number = null, $entries_per_page = null, $exclude_listing_sk_us = null, $discontinued = null, $description = null, $description2 = null, $description3 = null, $description4 = null, $description5 = null, $supplier_sku = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getProducts');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getProducts');
        }
        // parse inputs
        $resourcePath = "/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($stock_number !== null) {
            $queryParams['stockNumber'] = $this->apiClient->getSerializer()->toQueryValue($stock_number);
        }
        // query params
        if ($isbn !== null) {
            $queryParams['isbn'] = $this->apiClient->getSerializer()->toQueryValue($isbn);
        }
        // query params
        if ($upc !== null) {
            $queryParams['upc'] = $this->apiClient->getSerializer()->toQueryValue($upc);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = $this->apiClient->getSerializer()->toQueryValue($title);
        }
        // query params
        if ($list_on !== null) {
            $queryParams['listOn'] = $this->apiClient->getSerializer()->toQueryValue($list_on);
        }
        // query params
        if ($on_hand_qty1 !== null) {
            $queryParams['onHandQty1'] = $this->apiClient->getSerializer()->toQueryValue($on_hand_qty1);
        }
        // query params
        if ($on_hand_qty2 !== null) {
            $queryParams['onHandQty2'] = $this->apiClient->getSerializer()->toQueryValue($on_hand_qty2);
        }
        // query params
        if ($on_hand_comparator !== null) {
            $queryParams['onHandComparator'] = $this->apiClient->getSerializer()->toQueryValue($on_hand_comparator);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($supplier_id !== null) {
            $queryParams['supplierId'] = $this->apiClient->getSerializer()->toQueryValue($supplier_id);
        }
        // query params
        if ($is_drop_ship !== null) {
            $queryParams['isDropShip'] = $this->apiClient->getSerializer()->toQueryValue($is_drop_ship);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($entries_per_page !== null) {
            $queryParams['entriesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($entries_per_page);
        }
        // query params
        if ($exclude_listing_sk_us !== null) {
            $queryParams['excludeListingSKUs'] = $this->apiClient->getSerializer()->toQueryValue($exclude_listing_sk_us);
        }
        // query params
        if ($discontinued !== null) {
            $queryParams['discontinued'] = $this->apiClient->getSerializer()->toQueryValue($discontinued);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($description2 !== null) {
            $queryParams['description2'] = $this->apiClient->getSerializer()->toQueryValue($description2);
        }
        // query params
        if ($description3 !== null) {
            $queryParams['description3'] = $this->apiClient->getSerializer()->toQueryValue($description3);
        }
        // query params
        if ($description4 !== null) {
            $queryParams['description4'] = $this->apiClient->getSerializer()->toQueryValue($description4);
        }
        // query params
        if ($description5 !== null) {
            $queryParams['description5'] = $this->apiClient->getSerializer()->toQueryValue($description5);
        }
        // query params
        if ($supplier_sku !== null) {
            $queryParams['supplierSKU'] = $this->apiClient->getSerializer()->toQueryValue($supplier_sku);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\ProductResultBean',
                '/products'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\ProductResultBean', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\ProductResultBean', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuestionMessage
     *
     * Returns eBay question content
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param int $question_id Question ID (optional)
     * @param string $message_id Message ID (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\QuestionMessage
     */
    public function getQuestionMessage($authorization, $x_api_key, $question_id = null, $message_id = null)
    {
        list($response) = $this->getQuestionMessageWithHttpInfo($authorization, $x_api_key, $question_id, $message_id);
        return $response;
    }

    /**
     * Operation getQuestionMessageWithHttpInfo
     *
     * Returns eBay question content
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param int $question_id Question ID (optional)
     * @param string $message_id Message ID (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\QuestionMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionMessageWithHttpInfo($authorization, $x_api_key, $question_id = null, $message_id = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getQuestionMessage');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getQuestionMessage');
        }
        // parse inputs
        $resourcePath = "/products/question/message";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($question_id !== null) {
            $queryParams['questionId'] = $this->apiClient->getSerializer()->toQueryValue($question_id);
        }
        // query params
        if ($message_id !== null) {
            $queryParams['messageId'] = $this->apiClient->getSerializer()->toQueryValue($message_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\QuestionMessage',
                '/products/question/message'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\QuestionMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\QuestionMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQuestions
     *
     * Returns a list of eBay product question data
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $sender_user_id Sender User ID (optional)
     * @param string $subject Subject (optional)
     * @param string $item_number eBay item number (optional)
     * @param string $product_title Product Title (optional)
     * @param \DateTime $from_date Date from (optional)
     * @param \DateTime $to_date Date to (optional)
     * @param int $entries_per_page No of entries per page (optional)
     * @param int $page_number Page number (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\QuestionResult
     */
    public function getQuestions($authorization, $x_api_key, $sender_user_id = null, $subject = null, $item_number = null, $product_title = null, $from_date = null, $to_date = null, $entries_per_page = null, $page_number = null)
    {
        list($response) = $this->getQuestionsWithHttpInfo($authorization, $x_api_key, $sender_user_id, $subject, $item_number, $product_title, $from_date, $to_date, $entries_per_page, $page_number);
        return $response;
    }

    /**
     * Operation getQuestionsWithHttpInfo
     *
     * Returns a list of eBay product question data
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $sender_user_id Sender User ID (optional)
     * @param string $subject Subject (optional)
     * @param string $item_number eBay item number (optional)
     * @param string $product_title Product Title (optional)
     * @param \DateTime $from_date Date from (optional)
     * @param \DateTime $to_date Date to (optional)
     * @param int $entries_per_page No of entries per page (optional)
     * @param int $page_number Page number (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\QuestionResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuestionsWithHttpInfo($authorization, $x_api_key, $sender_user_id = null, $subject = null, $item_number = null, $product_title = null, $from_date = null, $to_date = null, $entries_per_page = null, $page_number = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getQuestions');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getQuestions');
        }
        // parse inputs
        $resourcePath = "/products/questions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($sender_user_id !== null) {
            $queryParams['senderUserID'] = $this->apiClient->getSerializer()->toQueryValue($sender_user_id);
        }
        // query params
        if ($subject !== null) {
            $queryParams['subject'] = $this->apiClient->getSerializer()->toQueryValue($subject);
        }
        // query params
        if ($item_number !== null) {
            $queryParams['itemNumber'] = $this->apiClient->getSerializer()->toQueryValue($item_number);
        }
        // query params
        if ($product_title !== null) {
            $queryParams['productTitle'] = $this->apiClient->getSerializer()->toQueryValue($product_title);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = $this->apiClient->getSerializer()->toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = $this->apiClient->getSerializer()->toQueryValue($to_date);
        }
        // query params
        if ($entries_per_page !== null) {
            $queryParams['entriesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($entries_per_page);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\QuestionResult',
                '/products/questions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\QuestionResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\QuestionResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStockLevels
     *
     * Returns product stock levels
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number Stock Number (optional)
     * @param string $isbn ISBN (optional)
     * @param string $upc UPC (optional)
     * @param string $title Product Title (optional)
     * @param string $list_on list on (optional)
     * @param int $on_hand_qty1 On Hand Quantity 1 (optional)
     * @param int $on_hand_qty2 On Hand Quantity 2 (optional)
     * @param string $on_hand_comparator On Hand Comparator (optional)
     * @param int $available_qty1 Available Quantity 1 (optional)
     * @param int $available_qty2 Available Quantity 2 (optional)
     * @param string $available_comparator Available Comparator (optional)
     * @param string $status Product Status (optional)
     * @param int $supplier_id Supplier ID (optional)
     * @param bool $is_drop_ship Is Dropship item? (optional)
     * @param int $page_number Page number (optional)
     * @param int $entries_per_page No of entries per page (optional)
     * @param bool $exclude_listing_sk_us Exclude Listing SKUs? (optional)
     * @param bool $discontinued Product discontinued? (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\StockLevelResult
     */
    public function getStockLevels($authorization, $x_api_key, $stock_number = null, $isbn = null, $upc = null, $title = null, $list_on = null, $on_hand_qty1 = null, $on_hand_qty2 = null, $on_hand_comparator = null, $available_qty1 = null, $available_qty2 = null, $available_comparator = null, $status = null, $supplier_id = null, $is_drop_ship = null, $page_number = null, $entries_per_page = null, $exclude_listing_sk_us = null, $discontinued = null)
    {
        list($response) = $this->getStockLevelsWithHttpInfo($authorization, $x_api_key, $stock_number, $isbn, $upc, $title, $list_on, $on_hand_qty1, $on_hand_qty2, $on_hand_comparator, $available_qty1, $available_qty2, $available_comparator, $status, $supplier_id, $is_drop_ship, $page_number, $entries_per_page, $exclude_listing_sk_us, $discontinued);
        return $response;
    }

    /**
     * Operation getStockLevelsWithHttpInfo
     *
     * Returns product stock levels
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number Stock Number (optional)
     * @param string $isbn ISBN (optional)
     * @param string $upc UPC (optional)
     * @param string $title Product Title (optional)
     * @param string $list_on list on (optional)
     * @param int $on_hand_qty1 On Hand Quantity 1 (optional)
     * @param int $on_hand_qty2 On Hand Quantity 2 (optional)
     * @param string $on_hand_comparator On Hand Comparator (optional)
     * @param int $available_qty1 Available Quantity 1 (optional)
     * @param int $available_qty2 Available Quantity 2 (optional)
     * @param string $available_comparator Available Comparator (optional)
     * @param string $status Product Status (optional)
     * @param int $supplier_id Supplier ID (optional)
     * @param bool $is_drop_ship Is Dropship item? (optional)
     * @param int $page_number Page number (optional)
     * @param int $entries_per_page No of entries per page (optional)
     * @param bool $exclude_listing_sk_us Exclude Listing SKUs? (optional)
     * @param bool $discontinued Product discontinued? (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\StockLevelResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStockLevelsWithHttpInfo($authorization, $x_api_key, $stock_number = null, $isbn = null, $upc = null, $title = null, $list_on = null, $on_hand_qty1 = null, $on_hand_qty2 = null, $on_hand_comparator = null, $available_qty1 = null, $available_qty2 = null, $available_comparator = null, $status = null, $supplier_id = null, $is_drop_ship = null, $page_number = null, $entries_per_page = null, $exclude_listing_sk_us = null, $discontinued = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getStockLevels');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getStockLevels');
        }
        // parse inputs
        $resourcePath = "/products/stockLevels";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($stock_number !== null) {
            $queryParams['stockNumber'] = $this->apiClient->getSerializer()->toQueryValue($stock_number);
        }
        // query params
        if ($isbn !== null) {
            $queryParams['isbn'] = $this->apiClient->getSerializer()->toQueryValue($isbn);
        }
        // query params
        if ($upc !== null) {
            $queryParams['upc'] = $this->apiClient->getSerializer()->toQueryValue($upc);
        }
        // query params
        if ($title !== null) {
            $queryParams['title'] = $this->apiClient->getSerializer()->toQueryValue($title);
        }
        // query params
        if ($list_on !== null) {
            $queryParams['listOn'] = $this->apiClient->getSerializer()->toQueryValue($list_on);
        }
        // query params
        if ($on_hand_qty1 !== null) {
            $queryParams['onHandQty1'] = $this->apiClient->getSerializer()->toQueryValue($on_hand_qty1);
        }
        // query params
        if ($on_hand_qty2 !== null) {
            $queryParams['onHandQty2'] = $this->apiClient->getSerializer()->toQueryValue($on_hand_qty2);
        }
        // query params
        if ($on_hand_comparator !== null) {
            $queryParams['onHandComparator'] = $this->apiClient->getSerializer()->toQueryValue($on_hand_comparator);
        }
        // query params
        if ($available_qty1 !== null) {
            $queryParams['availableQty1'] = $this->apiClient->getSerializer()->toQueryValue($available_qty1);
        }
        // query params
        if ($available_qty2 !== null) {
            $queryParams['availableQty2'] = $this->apiClient->getSerializer()->toQueryValue($available_qty2);
        }
        // query params
        if ($available_comparator !== null) {
            $queryParams['availableComparator'] = $this->apiClient->getSerializer()->toQueryValue($available_comparator);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($supplier_id !== null) {
            $queryParams['supplierId'] = $this->apiClient->getSerializer()->toQueryValue($supplier_id);
        }
        // query params
        if ($is_drop_ship !== null) {
            $queryParams['isDropShip'] = $this->apiClient->getSerializer()->toQueryValue($is_drop_ship);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $this->apiClient->getSerializer()->toQueryValue($page_number);
        }
        // query params
        if ($entries_per_page !== null) {
            $queryParams['entriesPerPage'] = $this->apiClient->getSerializer()->toQueryValue($entries_per_page);
        }
        // query params
        if ($exclude_listing_sk_us !== null) {
            $queryParams['excludeListingSKUs'] = $this->apiClient->getSerializer()->toQueryValue($exclude_listing_sk_us);
        }
        // query params
        if ($discontinued !== null) {
            $queryParams['discontinued'] = $this->apiClient->getSerializer()->toQueryValue($discontinued);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\StockLevelResult',
                '/products/stockLevels'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\StockLevelResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\StockLevelResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getStockLevels_0
     *
     * Returns the locations and quantity of where given stock numbers are stored
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number Stock Number (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\StockLocationResponse
     */
    public function getStockLevels_0($authorization, $x_api_key, $stock_number = null)
    {
        list($response) = $this->getStockLevels_0WithHttpInfo($authorization, $x_api_key, $stock_number);
        return $response;
    }

    /**
     * Operation getStockLevels_0WithHttpInfo
     *
     * Returns the locations and quantity of where given stock numbers are stored
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param string $stock_number Stock Number (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\StockLocationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStockLevels_0WithHttpInfo($authorization, $x_api_key, $stock_number = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getStockLevels_0');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling getStockLevels_0');
        }
        // parse inputs
        $resourcePath = "/products/stockLevels/locations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($stock_number !== null) {
            $queryParams['stockNumber'] = $this->apiClient->getSerializer()->toQueryValue($stock_number);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\StockLocationResponse',
                '/products/stockLevels/locations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\StockLocationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\StockLocationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importProducts
     *
     * Import product data
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param \VoloCommerce\Api\v1\Model\CustomImportRequest $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\ImportProductsResponse
     */
    public function importProducts($authorization, $x_api_key, $body = null)
    {
        list($response) = $this->importProductsWithHttpInfo($authorization, $x_api_key, $body);
        return $response;
    }

    /**
     * Operation importProductsWithHttpInfo
     *
     * Import product data
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param \VoloCommerce\Api\v1\Model\CustomImportRequest $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\ImportProductsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importProductsWithHttpInfo($authorization, $x_api_key, $body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling importProducts');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling importProducts');
        }
        // parse inputs
        $resourcePath = "/products/import";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\ImportProductsResponse',
                '/products/import'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\ImportProductsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\ImportProductsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchProductsByField
     *
     * Define product data to be retrieved
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param \VoloCommerce\Api\v1\Model\ProductsSearchByFieldRequest $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\ProductSearchByFieldResponse
     */
    public function searchProductsByField($authorization, $x_api_key, $body = null)
    {
        list($response) = $this->searchProductsByFieldWithHttpInfo($authorization, $x_api_key, $body);
        return $response;
    }

    /**
     * Operation searchProductsByFieldWithHttpInfo
     *
     * Define product data to be retrieved
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param \VoloCommerce\Api\v1\Model\ProductsSearchByFieldRequest $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\ProductSearchByFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchProductsByFieldWithHttpInfo($authorization, $x_api_key, $body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling searchProductsByField');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling searchProductsByField');
        }
        // parse inputs
        $resourcePath = "/products/searchByField";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\ProductSearchByFieldResponse',
                '/products/searchByField'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\ProductSearchByFieldResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\ProductSearchByFieldResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation sendProductAnswer
     *
     * Send reply to eBay product questions
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param \VoloCommerce\Api\v1\Model\ReplyProductQuestionBean $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\MessageResponse
     */
    public function sendProductAnswer($authorization, $x_api_key, $body = null)
    {
        list($response) = $this->sendProductAnswerWithHttpInfo($authorization, $x_api_key, $body);
        return $response;
    }

    /**
     * Operation sendProductAnswerWithHttpInfo
     *
     * Send reply to eBay product questions
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param \VoloCommerce\Api\v1\Model\ReplyProductQuestionBean $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\MessageResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendProductAnswerWithHttpInfo($authorization, $x_api_key, $body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sendProductAnswer');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling sendProductAnswer');
        }
        // parse inputs
        $resourcePath = "/products/question/reply";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\MessageResponse',
                '/products/question/reply'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\MessageResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\MessageResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProducts
     *
     * Update stock level and prices of products
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param \VoloCommerce\Api\v1\Model\PartialProductUpdates $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\PartialProductUpdateResult
     */
    public function updateProducts($authorization, $x_api_key, $body = null)
    {
        list($response) = $this->updateProductsWithHttpInfo($authorization, $x_api_key, $body);
        return $response;
    }

    /**
     * Operation updateProductsWithHttpInfo
     *
     * Update stock level and prices of products
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param \VoloCommerce\Api\v1\Model\PartialProductUpdates $body  (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\PartialProductUpdateResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductsWithHttpInfo($authorization, $x_api_key, $body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling updateProducts');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling updateProducts');
        }
        // parse inputs
        $resourcePath = "/products/partial";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\PartialProductUpdateResult',
                '/products/partial'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\PartialProductUpdateResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\PartialProductUpdateResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProductsAsync
     *
     * Update stock level and prices of products asynchronously
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param \VoloCommerce\Api\v1\Model\PartialProductUpdates $body Partial products objects that needs to be updated (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return \VoloCommerce\Api\v1\Model\UpdateProductAsyncResponse
     */
    public function updateProductsAsync($authorization, $x_api_key, $body = null)
    {
        list($response) = $this->updateProductsAsyncWithHttpInfo($authorization, $x_api_key, $body);
        return $response;
    }

    /**
     * Operation updateProductsAsyncWithHttpInfo
     *
     * Update stock level and prices of products asynchronously
     *
     * @param string $authorization Auth token (required)
     * @param string $x_api_key API Key (required)
     * @param \VoloCommerce\Api\v1\Model\PartialProductUpdates $body Partial products objects that needs to be updated (optional)
     * @throws \VoloCommerce\Api\v1\ApiException on non-2xx response
     * @return array of \VoloCommerce\Api\v1\Model\UpdateProductAsyncResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductsAsyncWithHttpInfo($authorization, $x_api_key, $body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling updateProductsAsync');
        }
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_api_key when calling updateProductsAsync');
        }
        // parse inputs
        $resourcePath = "/products/partial/async";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json; charset=utf-8']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($x_api_key !== null) {
            $headerParams['x-api-key'] = $this->apiClient->getSerializer()->toHeaderValue($x_api_key);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\VoloCommerce\Api\v1\Model\UpdateProductAsyncResponse',
                '/products/partial/async'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\VoloCommerce\Api\v1\Model\UpdateProductAsyncResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\UpdateProductAsyncResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\VoloCommerce\Api\v1\Model\VoloAPIErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
