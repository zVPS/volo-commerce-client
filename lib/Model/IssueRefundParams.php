<?php
/**
 * IssueRefundParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Model;

use \ArrayAccess;

/**
 * IssueRefundParams Class Doc Comment
 *
 * @category    Class
 * @package     \VoloCommerce\Api\v1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IssueRefundParams implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'IssueRefundParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reason' => 'string',
        'stock_action' => 'int',
        'location_id' => 'int',
        'shipping' => '\VoloCommerce\Api\v1\Model\ShippingRefundItem',
        'refund_order_items' => '\VoloCommerce\Api\v1\Model\RefundOrderItem[]',
        'refund_payments' => '\VoloCommerce\Api\v1\Model\RefundPaymentItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reason' => null,
        'stock_action' => 'int32',
        'location_id' => 'int32',
        'shipping' => null,
        'refund_order_items' => null,
        'refund_payments' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'reason' => 'reason',
        'stock_action' => 'stockAction',
        'location_id' => 'locationId',
        'shipping' => 'shipping',
        'refund_order_items' => 'refundOrderItems',
        'refund_payments' => 'refundPayments'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'reason' => 'setReason',
        'stock_action' => 'setStockAction',
        'location_id' => 'setLocationId',
        'shipping' => 'setShipping',
        'refund_order_items' => 'setRefundOrderItems',
        'refund_payments' => 'setRefundPayments'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'reason' => 'getReason',
        'stock_action' => 'getStockAction',
        'location_id' => 'getLocationId',
        'shipping' => 'getShipping',
        'refund_order_items' => 'getRefundOrderItems',
        'refund_payments' => 'getRefundPayments'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['stock_action'] = isset($data['stock_action']) ? $data['stock_action'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['shipping'] = isset($data['shipping']) ? $data['shipping'] : null;
        $this->container['refund_order_items'] = isset($data['refund_order_items']) ? $data['refund_order_items'] : null;
        $this->container['refund_payments'] = isset($data['refund_payments']) ? $data['refund_payments'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets reason
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     * @param string $reason
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets stock_action
     * @return int
     */
    public function getStockAction()
    {
        return $this->container['stock_action'];
    }

    /**
     * Sets stock_action
     * @param int $stock_action
     * @return $this
     */
    public function setStockAction($stock_action)
    {
        $this->container['stock_action'] = $stock_action;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets shipping
     * @return \VoloCommerce\Api\v1\Model\ShippingRefundItem
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     * @param \VoloCommerce\Api\v1\Model\ShippingRefundItem $shipping
     * @return $this
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets refund_order_items
     * @return \VoloCommerce\Api\v1\Model\RefundOrderItem[]
     */
    public function getRefundOrderItems()
    {
        return $this->container['refund_order_items'];
    }

    /**
     * Sets refund_order_items
     * @param \VoloCommerce\Api\v1\Model\RefundOrderItem[] $refund_order_items
     * @return $this
     */
    public function setRefundOrderItems($refund_order_items)
    {
        $this->container['refund_order_items'] = $refund_order_items;

        return $this;
    }

    /**
     * Gets refund_payments
     * @return \VoloCommerce\Api\v1\Model\RefundPaymentItem[]
     */
    public function getRefundPayments()
    {
        return $this->container['refund_payments'];
    }

    /**
     * Sets refund_payments
     * @param \VoloCommerce\Api\v1\Model\RefundPaymentItem[] $refund_payments
     * @return $this
     */
    public function setRefundPayments($refund_payments)
    {
        $this->container['refund_payments'] = $refund_payments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


