<?php
/**
 * ImportProductsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Model;

use \ArrayAccess;

/**
 * ImportProductsResponse Class Doc Comment
 *
 * @category    Class
 * @package     \VoloCommerce\Api\v1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ImportProductsResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ImportProductsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'layout_name' => 'string',
        'key_field' => 'string',
        'total_records' => 'int',
        'total_records_inserted' => 'int',
        'total_records_updated' => 'int',
        'total_records_skipped' => 'int',
        'error' => 'string',
        'page_context' => '\VoloCommerce\Api\v1\Model\PageContext'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'layout_name' => null,
        'key_field' => null,
        'total_records' => 'int32',
        'total_records_inserted' => 'int32',
        'total_records_updated' => 'int32',
        'total_records_skipped' => 'int32',
        'error' => null,
        'page_context' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'layout_name' => 'layoutName',
        'key_field' => 'keyField',
        'total_records' => 'totalRecords',
        'total_records_inserted' => 'totalRecordsInserted',
        'total_records_updated' => 'totalRecordsUpdated',
        'total_records_skipped' => 'totalRecordsSkipped',
        'error' => 'error',
        'page_context' => 'pageContext'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'layout_name' => 'setLayoutName',
        'key_field' => 'setKeyField',
        'total_records' => 'setTotalRecords',
        'total_records_inserted' => 'setTotalRecordsInserted',
        'total_records_updated' => 'setTotalRecordsUpdated',
        'total_records_skipped' => 'setTotalRecordsSkipped',
        'error' => 'setError',
        'page_context' => 'setPageContext'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'layout_name' => 'getLayoutName',
        'key_field' => 'getKeyField',
        'total_records' => 'getTotalRecords',
        'total_records_inserted' => 'getTotalRecordsInserted',
        'total_records_updated' => 'getTotalRecordsUpdated',
        'total_records_skipped' => 'getTotalRecordsSkipped',
        'error' => 'getError',
        'page_context' => 'getPageContext'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['layout_name'] = isset($data['layout_name']) ? $data['layout_name'] : null;
        $this->container['key_field'] = isset($data['key_field']) ? $data['key_field'] : null;
        $this->container['total_records'] = isset($data['total_records']) ? $data['total_records'] : null;
        $this->container['total_records_inserted'] = isset($data['total_records_inserted']) ? $data['total_records_inserted'] : null;
        $this->container['total_records_updated'] = isset($data['total_records_updated']) ? $data['total_records_updated'] : null;
        $this->container['total_records_skipped'] = isset($data['total_records_skipped']) ? $data['total_records_skipped'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
        $this->container['page_context'] = isset($data['page_context']) ? $data['page_context'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets layout_name
     * @return string
     */
    public function getLayoutName()
    {
        return $this->container['layout_name'];
    }

    /**
     * Sets layout_name
     * @param string $layout_name
     * @return $this
     */
    public function setLayoutName($layout_name)
    {
        $this->container['layout_name'] = $layout_name;

        return $this;
    }

    /**
     * Gets key_field
     * @return string
     */
    public function getKeyField()
    {
        return $this->container['key_field'];
    }

    /**
     * Sets key_field
     * @param string $key_field
     * @return $this
     */
    public function setKeyField($key_field)
    {
        $this->container['key_field'] = $key_field;

        return $this;
    }

    /**
     * Gets total_records
     * @return int
     */
    public function getTotalRecords()
    {
        return $this->container['total_records'];
    }

    /**
     * Sets total_records
     * @param int $total_records
     * @return $this
     */
    public function setTotalRecords($total_records)
    {
        $this->container['total_records'] = $total_records;

        return $this;
    }

    /**
     * Gets total_records_inserted
     * @return int
     */
    public function getTotalRecordsInserted()
    {
        return $this->container['total_records_inserted'];
    }

    /**
     * Sets total_records_inserted
     * @param int $total_records_inserted
     * @return $this
     */
    public function setTotalRecordsInserted($total_records_inserted)
    {
        $this->container['total_records_inserted'] = $total_records_inserted;

        return $this;
    }

    /**
     * Gets total_records_updated
     * @return int
     */
    public function getTotalRecordsUpdated()
    {
        return $this->container['total_records_updated'];
    }

    /**
     * Sets total_records_updated
     * @param int $total_records_updated
     * @return $this
     */
    public function setTotalRecordsUpdated($total_records_updated)
    {
        $this->container['total_records_updated'] = $total_records_updated;

        return $this;
    }

    /**
     * Gets total_records_skipped
     * @return int
     */
    public function getTotalRecordsSkipped()
    {
        return $this->container['total_records_skipped'];
    }

    /**
     * Sets total_records_skipped
     * @param int $total_records_skipped
     * @return $this
     */
    public function setTotalRecordsSkipped($total_records_skipped)
    {
        $this->container['total_records_skipped'] = $total_records_skipped;

        return $this;
    }

    /**
     * Gets error
     * @return string
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     * @param string $error
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets page_context
     * @return \VoloCommerce\Api\v1\Model\PageContext
     */
    public function getPageContext()
    {
        return $this->container['page_context'];
    }

    /**
     * Sets page_context
     * @param \VoloCommerce\Api\v1\Model\PageContext $page_context
     * @return $this
     */
    public function setPageContext($page_context)
    {
        $this->container['page_context'] = $page_context;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


