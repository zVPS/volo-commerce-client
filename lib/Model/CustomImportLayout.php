<?php
/**
 * CustomImportLayout
 *
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Model;

use \ArrayAccess;

/**
 * CustomImportLayout Class Doc Comment
 *
 * @category    Class
 * @package     \VoloCommerce\Api\v1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CustomImportLayout implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CustomImportLayout';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'layout_fields' => '\VoloCommerce\Api\v1\Model\LayoutFields',
        'seller_central_category' => 'string',
        'seller_central_sub_category' => 'string',
        'layout_name' => 'string',
        'flag_for_new_products' => 'int',
        'skip_existing_product' => 'bool',
        'skip_new_product' => 'bool',
        'key_field' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'layout_fields' => null,
        'seller_central_category' => null,
        'seller_central_sub_category' => null,
        'layout_name' => null,
        'flag_for_new_products' => 'int32',
        'skip_existing_product' => null,
        'skip_new_product' => null,
        'key_field' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'layout_fields' => 'layoutFields',
        'seller_central_category' => 'sellerCentralCategory',
        'seller_central_sub_category' => 'sellerCentralSubCategory',
        'layout_name' => 'layoutName',
        'flag_for_new_products' => 'flagForNewProducts',
        'skip_existing_product' => 'skipExistingProduct',
        'skip_new_product' => 'skipNewProduct',
        'key_field' => 'keyField'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'layout_fields' => 'setLayoutFields',
        'seller_central_category' => 'setSellerCentralCategory',
        'seller_central_sub_category' => 'setSellerCentralSubCategory',
        'layout_name' => 'setLayoutName',
        'flag_for_new_products' => 'setFlagForNewProducts',
        'skip_existing_product' => 'setSkipExistingProduct',
        'skip_new_product' => 'setSkipNewProduct',
        'key_field' => 'setKeyField'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'layout_fields' => 'getLayoutFields',
        'seller_central_category' => 'getSellerCentralCategory',
        'seller_central_sub_category' => 'getSellerCentralSubCategory',
        'layout_name' => 'getLayoutName',
        'flag_for_new_products' => 'getFlagForNewProducts',
        'skip_existing_product' => 'getSkipExistingProduct',
        'skip_new_product' => 'getSkipNewProduct',
        'key_field' => 'getKeyField'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['layout_fields'] = isset($data['layout_fields']) ? $data['layout_fields'] : null;
        $this->container['seller_central_category'] = isset($data['seller_central_category']) ? $data['seller_central_category'] : null;
        $this->container['seller_central_sub_category'] = isset($data['seller_central_sub_category']) ? $data['seller_central_sub_category'] : null;
        $this->container['layout_name'] = isset($data['layout_name']) ? $data['layout_name'] : null;
        $this->container['flag_for_new_products'] = isset($data['flag_for_new_products']) ? $data['flag_for_new_products'] : null;
        $this->container['skip_existing_product'] = isset($data['skip_existing_product']) ? $data['skip_existing_product'] : null;
        $this->container['skip_new_product'] = isset($data['skip_new_product']) ? $data['skip_new_product'] : null;
        $this->container['key_field'] = isset($data['key_field']) ? $data['key_field'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets layout_fields
     * @return \VoloCommerce\Api\v1\Model\LayoutFields
     */
    public function getLayoutFields()
    {
        return $this->container['layout_fields'];
    }

    /**
     * Sets layout_fields
     * @param \VoloCommerce\Api\v1\Model\LayoutFields $layout_fields
     * @return $this
     */
    public function setLayoutFields($layout_fields)
    {
        $this->container['layout_fields'] = $layout_fields;

        return $this;
    }

    /**
     * Gets seller_central_category
     * @return string
     */
    public function getSellerCentralCategory()
    {
        return $this->container['seller_central_category'];
    }

    /**
     * Sets seller_central_category
     * @param string $seller_central_category
     * @return $this
     */
    public function setSellerCentralCategory($seller_central_category)
    {
        $this->container['seller_central_category'] = $seller_central_category;

        return $this;
    }

    /**
     * Gets seller_central_sub_category
     * @return string
     */
    public function getSellerCentralSubCategory()
    {
        return $this->container['seller_central_sub_category'];
    }

    /**
     * Sets seller_central_sub_category
     * @param string $seller_central_sub_category
     * @return $this
     */
    public function setSellerCentralSubCategory($seller_central_sub_category)
    {
        $this->container['seller_central_sub_category'] = $seller_central_sub_category;

        return $this;
    }

    /**
     * Gets layout_name
     * @return string
     */
    public function getLayoutName()
    {
        return $this->container['layout_name'];
    }

    /**
     * Sets layout_name
     * @param string $layout_name
     * @return $this
     */
    public function setLayoutName($layout_name)
    {
        $this->container['layout_name'] = $layout_name;

        return $this;
    }

    /**
     * Gets flag_for_new_products
     * @return int
     */
    public function getFlagForNewProducts()
    {
        return $this->container['flag_for_new_products'];
    }

    /**
     * Sets flag_for_new_products
     * @param int $flag_for_new_products
     * @return $this
     */
    public function setFlagForNewProducts($flag_for_new_products)
    {
        $this->container['flag_for_new_products'] = $flag_for_new_products;

        return $this;
    }

    /**
     * Gets skip_existing_product
     * @return bool
     */
    public function getSkipExistingProduct()
    {
        return $this->container['skip_existing_product'];
    }

    /**
     * Sets skip_existing_product
     * @param bool $skip_existing_product
     * @return $this
     */
    public function setSkipExistingProduct($skip_existing_product)
    {
        $this->container['skip_existing_product'] = $skip_existing_product;

        return $this;
    }

    /**
     * Gets skip_new_product
     * @return bool
     */
    public function getSkipNewProduct()
    {
        return $this->container['skip_new_product'];
    }

    /**
     * Sets skip_new_product
     * @param bool $skip_new_product
     * @return $this
     */
    public function setSkipNewProduct($skip_new_product)
    {
        $this->container['skip_new_product'] = $skip_new_product;

        return $this;
    }

    /**
     * Gets key_field
     * @return string
     */
    public function getKeyField()
    {
        return $this->container['key_field'];
    }

    /**
     * Sets key_field
     * @param string $key_field
     * @return $this
     */
    public function setKeyField($key_field)
    {
        $this->container['key_field'] = $key_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


