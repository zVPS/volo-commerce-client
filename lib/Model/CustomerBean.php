<?php
/**
 * CustomerBean
 *
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Model;

use \ArrayAccess;

/**
 * CustomerBean Class Doc Comment
 *
 * @category    Class
 * @package     \VoloCommerce\Api\v1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CustomerBean implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CustomerBean';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'company_name' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'city' => 'string',
        'county' => 'string',
        'country' => 'string',
        'postcode' => 'string',
        'phone_number' => 'string',
        'credit_limit' => 'double',
        'available_credit' => 'double',
        'merchant_type' => 'string',
        'accounts_code' => 'string',
        'vat_number' => 'string',
        'company_reg_number' => 'string',
        'phone_number2' => 'string',
        'phone_number3' => 'string',
        'phone_number4' => 'string',
        'fax_number' => 'string',
        'province' => 'string',
        'price_level' => 'string',
        'has_account' => 'bool',
        'mobile_number' => 'string',
        'orders' => 'int',
        'order_value' => 'double',
        'avg_order_value' => 'double',
        'email_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'company_name' => null,
        'address_line1' => null,
        'address_line2' => null,
        'city' => null,
        'county' => null,
        'country' => null,
        'postcode' => null,
        'phone_number' => null,
        'credit_limit' => 'double',
        'available_credit' => 'double',
        'merchant_type' => null,
        'accounts_code' => null,
        'vat_number' => null,
        'company_reg_number' => null,
        'phone_number2' => null,
        'phone_number3' => null,
        'phone_number4' => null,
        'fax_number' => null,
        'province' => null,
        'price_level' => null,
        'has_account' => null,
        'mobile_number' => null,
        'orders' => 'int32',
        'order_value' => 'double',
        'avg_order_value' => 'double',
        'email_address' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'company_name' => 'companyName',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'city' => 'city',
        'county' => 'county',
        'country' => 'country',
        'postcode' => 'postcode',
        'phone_number' => 'phoneNumber',
        'credit_limit' => 'creditLimit',
        'available_credit' => 'availableCredit',
        'merchant_type' => 'merchantType',
        'accounts_code' => 'accountsCode',
        'vat_number' => 'vatNumber',
        'company_reg_number' => 'companyRegNumber',
        'phone_number2' => 'phoneNumber2',
        'phone_number3' => 'phoneNumber3',
        'phone_number4' => 'phoneNumber4',
        'fax_number' => 'faxNumber',
        'province' => 'province',
        'price_level' => 'priceLevel',
        'has_account' => 'hasAccount',
        'mobile_number' => 'mobileNumber',
        'orders' => 'orders',
        'order_value' => 'orderValue',
        'avg_order_value' => 'avgOrderValue',
        'email_address' => 'emailAddress'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'company_name' => 'setCompanyName',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'city' => 'setCity',
        'county' => 'setCounty',
        'country' => 'setCountry',
        'postcode' => 'setPostcode',
        'phone_number' => 'setPhoneNumber',
        'credit_limit' => 'setCreditLimit',
        'available_credit' => 'setAvailableCredit',
        'merchant_type' => 'setMerchantType',
        'accounts_code' => 'setAccountsCode',
        'vat_number' => 'setVatNumber',
        'company_reg_number' => 'setCompanyRegNumber',
        'phone_number2' => 'setPhoneNumber2',
        'phone_number3' => 'setPhoneNumber3',
        'phone_number4' => 'setPhoneNumber4',
        'fax_number' => 'setFaxNumber',
        'province' => 'setProvince',
        'price_level' => 'setPriceLevel',
        'has_account' => 'setHasAccount',
        'mobile_number' => 'setMobileNumber',
        'orders' => 'setOrders',
        'order_value' => 'setOrderValue',
        'avg_order_value' => 'setAvgOrderValue',
        'email_address' => 'setEmailAddress'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'company_name' => 'getCompanyName',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'city' => 'getCity',
        'county' => 'getCounty',
        'country' => 'getCountry',
        'postcode' => 'getPostcode',
        'phone_number' => 'getPhoneNumber',
        'credit_limit' => 'getCreditLimit',
        'available_credit' => 'getAvailableCredit',
        'merchant_type' => 'getMerchantType',
        'accounts_code' => 'getAccountsCode',
        'vat_number' => 'getVatNumber',
        'company_reg_number' => 'getCompanyRegNumber',
        'phone_number2' => 'getPhoneNumber2',
        'phone_number3' => 'getPhoneNumber3',
        'phone_number4' => 'getPhoneNumber4',
        'fax_number' => 'getFaxNumber',
        'province' => 'getProvince',
        'price_level' => 'getPriceLevel',
        'has_account' => 'getHasAccount',
        'mobile_number' => 'getMobileNumber',
        'orders' => 'getOrders',
        'order_value' => 'getOrderValue',
        'avg_order_value' => 'getAvgOrderValue',
        'email_address' => 'getEmailAddress'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['available_credit'] = isset($data['available_credit']) ? $data['available_credit'] : null;
        $this->container['merchant_type'] = isset($data['merchant_type']) ? $data['merchant_type'] : null;
        $this->container['accounts_code'] = isset($data['accounts_code']) ? $data['accounts_code'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['company_reg_number'] = isset($data['company_reg_number']) ? $data['company_reg_number'] : null;
        $this->container['phone_number2'] = isset($data['phone_number2']) ? $data['phone_number2'] : null;
        $this->container['phone_number3'] = isset($data['phone_number3']) ? $data['phone_number3'] : null;
        $this->container['phone_number4'] = isset($data['phone_number4']) ? $data['phone_number4'] : null;
        $this->container['fax_number'] = isset($data['fax_number']) ? $data['fax_number'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['price_level'] = isset($data['price_level']) ? $data['price_level'] : null;
        $this->container['has_account'] = isset($data['has_account']) ? $data['has_account'] : null;
        $this->container['mobile_number'] = isset($data['mobile_number']) ? $data['mobile_number'] : null;
        $this->container['orders'] = isset($data['orders']) ? $data['orders'] : null;
        $this->container['order_value'] = isset($data['order_value']) ? $data['order_value'] : null;
        $this->container['avg_order_value'] = isset($data['avg_order_value']) ? $data['avg_order_value'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets company_name
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     * @param string $company_name
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets address_line1
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     * @param string $address_line1
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     * @param string $address_line2
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets county
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     * @param string $county
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets postcode
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     * @param string $postcode
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets phone_number
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     * @param string $phone_number
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets credit_limit
     * @return double
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     * @param double $credit_limit
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets available_credit
     * @return double
     */
    public function getAvailableCredit()
    {
        return $this->container['available_credit'];
    }

    /**
     * Sets available_credit
     * @param double $available_credit
     * @return $this
     */
    public function setAvailableCredit($available_credit)
    {
        $this->container['available_credit'] = $available_credit;

        return $this;
    }

    /**
     * Gets merchant_type
     * @return string
     */
    public function getMerchantType()
    {
        return $this->container['merchant_type'];
    }

    /**
     * Sets merchant_type
     * @param string $merchant_type
     * @return $this
     */
    public function setMerchantType($merchant_type)
    {
        $this->container['merchant_type'] = $merchant_type;

        return $this;
    }

    /**
     * Gets accounts_code
     * @return string
     */
    public function getAccountsCode()
    {
        return $this->container['accounts_code'];
    }

    /**
     * Sets accounts_code
     * @param string $accounts_code
     * @return $this
     */
    public function setAccountsCode($accounts_code)
    {
        $this->container['accounts_code'] = $accounts_code;

        return $this;
    }

    /**
     * Gets vat_number
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     * @param string $vat_number
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets company_reg_number
     * @return string
     */
    public function getCompanyRegNumber()
    {
        return $this->container['company_reg_number'];
    }

    /**
     * Sets company_reg_number
     * @param string $company_reg_number
     * @return $this
     */
    public function setCompanyRegNumber($company_reg_number)
    {
        $this->container['company_reg_number'] = $company_reg_number;

        return $this;
    }

    /**
     * Gets phone_number2
     * @return string
     */
    public function getPhoneNumber2()
    {
        return $this->container['phone_number2'];
    }

    /**
     * Sets phone_number2
     * @param string $phone_number2
     * @return $this
     */
    public function setPhoneNumber2($phone_number2)
    {
        $this->container['phone_number2'] = $phone_number2;

        return $this;
    }

    /**
     * Gets phone_number3
     * @return string
     */
    public function getPhoneNumber3()
    {
        return $this->container['phone_number3'];
    }

    /**
     * Sets phone_number3
     * @param string $phone_number3
     * @return $this
     */
    public function setPhoneNumber3($phone_number3)
    {
        $this->container['phone_number3'] = $phone_number3;

        return $this;
    }

    /**
     * Gets phone_number4
     * @return string
     */
    public function getPhoneNumber4()
    {
        return $this->container['phone_number4'];
    }

    /**
     * Sets phone_number4
     * @param string $phone_number4
     * @return $this
     */
    public function setPhoneNumber4($phone_number4)
    {
        $this->container['phone_number4'] = $phone_number4;

        return $this;
    }

    /**
     * Gets fax_number
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     * @param string $fax_number
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets province
     * @return string
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     * @param string $province
     * @return $this
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets price_level
     * @return string
     */
    public function getPriceLevel()
    {
        return $this->container['price_level'];
    }

    /**
     * Sets price_level
     * @param string $price_level
     * @return $this
     */
    public function setPriceLevel($price_level)
    {
        $this->container['price_level'] = $price_level;

        return $this;
    }

    /**
     * Gets has_account
     * @return bool
     */
    public function getHasAccount()
    {
        return $this->container['has_account'];
    }

    /**
     * Sets has_account
     * @param bool $has_account
     * @return $this
     */
    public function setHasAccount($has_account)
    {
        $this->container['has_account'] = $has_account;

        return $this;
    }

    /**
     * Gets mobile_number
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     * @param string $mobile_number
     * @return $this
     */
    public function setMobileNumber($mobile_number)
    {
        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets orders
     * @return int
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     * @param int $orders
     * @return $this
     */
    public function setOrders($orders)
    {
        $this->container['orders'] = $orders;

        return $this;
    }

    /**
     * Gets order_value
     * @return double
     */
    public function getOrderValue()
    {
        return $this->container['order_value'];
    }

    /**
     * Sets order_value
     * @param double $order_value
     * @return $this
     */
    public function setOrderValue($order_value)
    {
        $this->container['order_value'] = $order_value;

        return $this;
    }

    /**
     * Gets avg_order_value
     * @return double
     */
    public function getAvgOrderValue()
    {
        return $this->container['avg_order_value'];
    }

    /**
     * Sets avg_order_value
     * @param double $avg_order_value
     * @return $this
     */
    public function setAvgOrderValue($avg_order_value)
    {
        $this->container['avg_order_value'] = $avg_order_value;

        return $this;
    }

    /**
     * Gets email_address
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     * @param string $email_address
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


