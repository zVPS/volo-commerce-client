<?php
/**
 * QuestionDataBean
 *
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Model;

use \ArrayAccess;

/**
 * QuestionDataBean Class Doc Comment
 *
 * @category    Class
 * @package     \VoloCommerce\Api\v1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QuestionDataBean implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'QuestionDataBean';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'reply_id' => 'int',
        'date' => '\DateTime',
        'flag' => 'int',
        'sender' => 'string',
        'item_number' => 'string',
        'subject' => 'string',
        'product_title' => 'string',
        'stock_number' => 'string',
        'site' => 'string',
        'junk' => 'int',
        'user_name' => 'string',
        'last_change_user' => 'string',
        'last_change_date' => '\DateTime',
        'seller' => 'string',
        'message_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'reply_id' => 'int32',
        'date' => 'date-time',
        'flag' => 'int32',
        'sender' => null,
        'item_number' => null,
        'subject' => null,
        'product_title' => null,
        'stock_number' => null,
        'site' => null,
        'junk' => 'int32',
        'user_name' => null,
        'last_change_user' => null,
        'last_change_date' => 'date-time',
        'seller' => null,
        'message_id' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'reply_id' => 'replyID',
        'date' => 'date',
        'flag' => 'flag',
        'sender' => 'sender',
        'item_number' => 'itemNumber',
        'subject' => 'subject',
        'product_title' => 'productTitle',
        'stock_number' => 'stockNumber',
        'site' => 'site',
        'junk' => 'junk',
        'user_name' => 'userName',
        'last_change_user' => 'lastChangeUser',
        'last_change_date' => 'lastChangeDate',
        'seller' => 'seller',
        'message_id' => 'messageId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'reply_id' => 'setReplyId',
        'date' => 'setDate',
        'flag' => 'setFlag',
        'sender' => 'setSender',
        'item_number' => 'setItemNumber',
        'subject' => 'setSubject',
        'product_title' => 'setProductTitle',
        'stock_number' => 'setStockNumber',
        'site' => 'setSite',
        'junk' => 'setJunk',
        'user_name' => 'setUserName',
        'last_change_user' => 'setLastChangeUser',
        'last_change_date' => 'setLastChangeDate',
        'seller' => 'setSeller',
        'message_id' => 'setMessageId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'reply_id' => 'getReplyId',
        'date' => 'getDate',
        'flag' => 'getFlag',
        'sender' => 'getSender',
        'item_number' => 'getItemNumber',
        'subject' => 'getSubject',
        'product_title' => 'getProductTitle',
        'stock_number' => 'getStockNumber',
        'site' => 'getSite',
        'junk' => 'getJunk',
        'user_name' => 'getUserName',
        'last_change_user' => 'getLastChangeUser',
        'last_change_date' => 'getLastChangeDate',
        'seller' => 'getSeller',
        'message_id' => 'getMessageId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['reply_id'] = isset($data['reply_id']) ? $data['reply_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['flag'] = isset($data['flag']) ? $data['flag'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['product_title'] = isset($data['product_title']) ? $data['product_title'] : null;
        $this->container['stock_number'] = isset($data['stock_number']) ? $data['stock_number'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['junk'] = isset($data['junk']) ? $data['junk'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['last_change_user'] = isset($data['last_change_user']) ? $data['last_change_user'] : null;
        $this->container['last_change_date'] = isset($data['last_change_date']) ? $data['last_change_date'] : null;
        $this->container['seller'] = isset($data['seller']) ? $data['seller'] : null;
        $this->container['message_id'] = isset($data['message_id']) ? $data['message_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets reply_id
     * @return int
     */
    public function getReplyId()
    {
        return $this->container['reply_id'];
    }

    /**
     * Sets reply_id
     * @param int $reply_id
     * @return $this
     */
    public function setReplyId($reply_id)
    {
        $this->container['reply_id'] = $reply_id;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets flag
     * @return int
     */
    public function getFlag()
    {
        return $this->container['flag'];
    }

    /**
     * Sets flag
     * @param int $flag
     * @return $this
     */
    public function setFlag($flag)
    {
        $this->container['flag'] = $flag;

        return $this;
    }

    /**
     * Gets sender
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     * @param string $sender
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets item_number
     * @return string
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     * @param string $item_number
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets subject
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     * @param string $subject
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets product_title
     * @return string
     */
    public function getProductTitle()
    {
        return $this->container['product_title'];
    }

    /**
     * Sets product_title
     * @param string $product_title
     * @return $this
     */
    public function setProductTitle($product_title)
    {
        $this->container['product_title'] = $product_title;

        return $this;
    }

    /**
     * Gets stock_number
     * @return string
     */
    public function getStockNumber()
    {
        return $this->container['stock_number'];
    }

    /**
     * Sets stock_number
     * @param string $stock_number
     * @return $this
     */
    public function setStockNumber($stock_number)
    {
        $this->container['stock_number'] = $stock_number;

        return $this;
    }

    /**
     * Gets site
     * @return string
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     * @param string $site
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets junk
     * @return int
     */
    public function getJunk()
    {
        return $this->container['junk'];
    }

    /**
     * Sets junk
     * @param int $junk
     * @return $this
     */
    public function setJunk($junk)
    {
        $this->container['junk'] = $junk;

        return $this;
    }

    /**
     * Gets user_name
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     * @param string $user_name
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets last_change_user
     * @return string
     */
    public function getLastChangeUser()
    {
        return $this->container['last_change_user'];
    }

    /**
     * Sets last_change_user
     * @param string $last_change_user
     * @return $this
     */
    public function setLastChangeUser($last_change_user)
    {
        $this->container['last_change_user'] = $last_change_user;

        return $this;
    }

    /**
     * Gets last_change_date
     * @return \DateTime
     */
    public function getLastChangeDate()
    {
        return $this->container['last_change_date'];
    }

    /**
     * Sets last_change_date
     * @param \DateTime $last_change_date
     * @return $this
     */
    public function setLastChangeDate($last_change_date)
    {
        $this->container['last_change_date'] = $last_change_date;

        return $this;
    }

    /**
     * Gets seller
     * @return string
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     * @param string $seller
     * @return $this
     */
    public function setSeller($seller)
    {
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets message_id
     * @return string
     */
    public function getMessageId()
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     * @param string $message_id
     * @return $this
     */
    public function setMessageId($message_id)
    {
        $this->container['message_id'] = $message_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


