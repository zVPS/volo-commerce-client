<?php
/**
 * CreateItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Model;

use \ArrayAccess;

/**
 * CreateItem Class Doc Comment
 *
 * @category    Class
 * @package     \VoloCommerce\Api\v1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CreateItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'web_product_id' => 'string',
        'stock_number' => 'string',
        'item_number' => 'string',
        'quantity' => 'int',
        'unit_cost' => 'float',
        'tax_rate' => 'float',
        'tax_code' => 'string',
        'unit_cost_includes_tax' => 'string',
        'weight' => 'float',
        'custom_message1' => 'string',
        'custom_message2' => 'string',
        'custom_message3' => 'string',
        'unit_item_tax' => 'double',
        'unit_shipping_tax' => 'double',
        'unit_shipping_amount' => 'double',
        'back_order' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'web_product_id' => null,
        'stock_number' => null,
        'item_number' => null,
        'quantity' => 'int32',
        'unit_cost' => null,
        'tax_rate' => null,
        'tax_code' => null,
        'unit_cost_includes_tax' => null,
        'weight' => null,
        'custom_message1' => null,
        'custom_message2' => null,
        'custom_message3' => null,
        'unit_item_tax' => 'double',
        'unit_shipping_tax' => 'double',
        'unit_shipping_amount' => 'double',
        'back_order' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'web_product_id' => 'webProductID',
        'stock_number' => 'stockNumber',
        'item_number' => 'itemNumber',
        'quantity' => 'quantity',
        'unit_cost' => 'unitCost',
        'tax_rate' => 'taxRate',
        'tax_code' => 'taxCode',
        'unit_cost_includes_tax' => 'unitCostIncludesTax',
        'weight' => 'weight',
        'custom_message1' => 'customMessage1',
        'custom_message2' => 'customMessage2',
        'custom_message3' => 'customMessage3',
        'unit_item_tax' => 'unitItemTax',
        'unit_shipping_tax' => 'unitShippingTax',
        'unit_shipping_amount' => 'unitShippingAmount',
        'back_order' => 'backOrder'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'web_product_id' => 'setWebProductId',
        'stock_number' => 'setStockNumber',
        'item_number' => 'setItemNumber',
        'quantity' => 'setQuantity',
        'unit_cost' => 'setUnitCost',
        'tax_rate' => 'setTaxRate',
        'tax_code' => 'setTaxCode',
        'unit_cost_includes_tax' => 'setUnitCostIncludesTax',
        'weight' => 'setWeight',
        'custom_message1' => 'setCustomMessage1',
        'custom_message2' => 'setCustomMessage2',
        'custom_message3' => 'setCustomMessage3',
        'unit_item_tax' => 'setUnitItemTax',
        'unit_shipping_tax' => 'setUnitShippingTax',
        'unit_shipping_amount' => 'setUnitShippingAmount',
        'back_order' => 'setBackOrder'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'web_product_id' => 'getWebProductId',
        'stock_number' => 'getStockNumber',
        'item_number' => 'getItemNumber',
        'quantity' => 'getQuantity',
        'unit_cost' => 'getUnitCost',
        'tax_rate' => 'getTaxRate',
        'tax_code' => 'getTaxCode',
        'unit_cost_includes_tax' => 'getUnitCostIncludesTax',
        'weight' => 'getWeight',
        'custom_message1' => 'getCustomMessage1',
        'custom_message2' => 'getCustomMessage2',
        'custom_message3' => 'getCustomMessage3',
        'unit_item_tax' => 'getUnitItemTax',
        'unit_shipping_tax' => 'getUnitShippingTax',
        'unit_shipping_amount' => 'getUnitShippingAmount',
        'back_order' => 'getBackOrder'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['web_product_id'] = isset($data['web_product_id']) ? $data['web_product_id'] : null;
        $this->container['stock_number'] = isset($data['stock_number']) ? $data['stock_number'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['unit_cost_includes_tax'] = isset($data['unit_cost_includes_tax']) ? $data['unit_cost_includes_tax'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['custom_message1'] = isset($data['custom_message1']) ? $data['custom_message1'] : null;
        $this->container['custom_message2'] = isset($data['custom_message2']) ? $data['custom_message2'] : null;
        $this->container['custom_message3'] = isset($data['custom_message3']) ? $data['custom_message3'] : null;
        $this->container['unit_item_tax'] = isset($data['unit_item_tax']) ? $data['unit_item_tax'] : null;
        $this->container['unit_shipping_tax'] = isset($data['unit_shipping_tax']) ? $data['unit_shipping_tax'] : null;
        $this->container['unit_shipping_amount'] = isset($data['unit_shipping_amount']) ? $data['unit_shipping_amount'] : null;
        $this->container['back_order'] = isset($data['back_order']) ? $data['back_order'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets web_product_id
     * @return string
     */
    public function getWebProductId()
    {
        return $this->container['web_product_id'];
    }

    /**
     * Sets web_product_id
     * @param string $web_product_id
     * @return $this
     */
    public function setWebProductId($web_product_id)
    {
        $this->container['web_product_id'] = $web_product_id;

        return $this;
    }

    /**
     * Gets stock_number
     * @return string
     */
    public function getStockNumber()
    {
        return $this->container['stock_number'];
    }

    /**
     * Sets stock_number
     * @param string $stock_number
     * @return $this
     */
    public function setStockNumber($stock_number)
    {
        $this->container['stock_number'] = $stock_number;

        return $this;
    }

    /**
     * Gets item_number
     * @return string
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     * @param string $item_number
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param int $quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_cost
     * @return float
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     * @param float $unit_cost
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets tax_rate
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     * @param float $tax_rate
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets tax_code
     * @return string
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     * @param string $tax_code
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets unit_cost_includes_tax
     * @return string
     */
    public function getUnitCostIncludesTax()
    {
        return $this->container['unit_cost_includes_tax'];
    }

    /**
     * Sets unit_cost_includes_tax
     * @param string $unit_cost_includes_tax
     * @return $this
     */
    public function setUnitCostIncludesTax($unit_cost_includes_tax)
    {
        $this->container['unit_cost_includes_tax'] = $unit_cost_includes_tax;

        return $this;
    }

    /**
     * Gets weight
     * @return float
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     * @param float $weight
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets custom_message1
     * @return string
     */
    public function getCustomMessage1()
    {
        return $this->container['custom_message1'];
    }

    /**
     * Sets custom_message1
     * @param string $custom_message1
     * @return $this
     */
    public function setCustomMessage1($custom_message1)
    {
        $this->container['custom_message1'] = $custom_message1;

        return $this;
    }

    /**
     * Gets custom_message2
     * @return string
     */
    public function getCustomMessage2()
    {
        return $this->container['custom_message2'];
    }

    /**
     * Sets custom_message2
     * @param string $custom_message2
     * @return $this
     */
    public function setCustomMessage2($custom_message2)
    {
        $this->container['custom_message2'] = $custom_message2;

        return $this;
    }

    /**
     * Gets custom_message3
     * @return string
     */
    public function getCustomMessage3()
    {
        return $this->container['custom_message3'];
    }

    /**
     * Sets custom_message3
     * @param string $custom_message3
     * @return $this
     */
    public function setCustomMessage3($custom_message3)
    {
        $this->container['custom_message3'] = $custom_message3;

        return $this;
    }

    /**
     * Gets unit_item_tax
     * @return double
     */
    public function getUnitItemTax()
    {
        return $this->container['unit_item_tax'];
    }

    /**
     * Sets unit_item_tax
     * @param double $unit_item_tax
     * @return $this
     */
    public function setUnitItemTax($unit_item_tax)
    {
        $this->container['unit_item_tax'] = $unit_item_tax;

        return $this;
    }

    /**
     * Gets unit_shipping_tax
     * @return double
     */
    public function getUnitShippingTax()
    {
        return $this->container['unit_shipping_tax'];
    }

    /**
     * Sets unit_shipping_tax
     * @param double $unit_shipping_tax
     * @return $this
     */
    public function setUnitShippingTax($unit_shipping_tax)
    {
        $this->container['unit_shipping_tax'] = $unit_shipping_tax;

        return $this;
    }

    /**
     * Gets unit_shipping_amount
     * @return double
     */
    public function getUnitShippingAmount()
    {
        return $this->container['unit_shipping_amount'];
    }

    /**
     * Sets unit_shipping_amount
     * @param double $unit_shipping_amount
     * @return $this
     */
    public function setUnitShippingAmount($unit_shipping_amount)
    {
        $this->container['unit_shipping_amount'] = $unit_shipping_amount;

        return $this;
    }

    /**
     * Gets back_order
     * @return bool
     */
    public function getBackOrder()
    {
        return $this->container['back_order'];
    }

    /**
     * Sets back_order
     * @param bool $back_order
     * @return $this
     */
    public function setBackOrder($back_order)
    {
        $this->container['back_order'] = $back_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


