<?php
/**
 * ProductsAPISearchCriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Model;

use \ArrayAccess;

/**
 * ProductsAPISearchCriteria Class Doc Comment
 *
 * @category    Class
 * @package     \VoloCommerce\Api\v1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ProductsAPISearchCriteria implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ProductsAPISearchCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stock_number' => 'string',
        'include_discontinued_items' => 'bool',
        'exclude_products_without_stock_number' => 'bool',
        'exclude_listing_sk_us' => 'bool',
        'include_committed' => 'bool',
        'pagination' => '\VoloCommerce\Api\v1\Model\Pagination',
        'listed_on_amazon' => 'bool',
        'listed_on_ebay' => 'bool',
        'listed_on_play' => 'bool',
        'listed_on_website' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'stock_number' => null,
        'include_discontinued_items' => null,
        'exclude_products_without_stock_number' => null,
        'exclude_listing_sk_us' => null,
        'include_committed' => null,
        'pagination' => null,
        'listed_on_amazon' => null,
        'listed_on_ebay' => null,
        'listed_on_play' => null,
        'listed_on_website' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'stock_number' => 'stockNumber',
        'include_discontinued_items' => 'includeDiscontinuedItems',
        'exclude_products_without_stock_number' => 'excludeProductsWithoutStockNumber',
        'exclude_listing_sk_us' => 'excludeListingSKUs',
        'include_committed' => 'includeCommitted',
        'pagination' => 'pagination',
        'listed_on_amazon' => 'listedOnAmazon',
        'listed_on_ebay' => 'listedOnEbay',
        'listed_on_play' => 'listedOnPlay',
        'listed_on_website' => 'listedOnWebsite'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'stock_number' => 'setStockNumber',
        'include_discontinued_items' => 'setIncludeDiscontinuedItems',
        'exclude_products_without_stock_number' => 'setExcludeProductsWithoutStockNumber',
        'exclude_listing_sk_us' => 'setExcludeListingSkUs',
        'include_committed' => 'setIncludeCommitted',
        'pagination' => 'setPagination',
        'listed_on_amazon' => 'setListedOnAmazon',
        'listed_on_ebay' => 'setListedOnEbay',
        'listed_on_play' => 'setListedOnPlay',
        'listed_on_website' => 'setListedOnWebsite'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'stock_number' => 'getStockNumber',
        'include_discontinued_items' => 'getIncludeDiscontinuedItems',
        'exclude_products_without_stock_number' => 'getExcludeProductsWithoutStockNumber',
        'exclude_listing_sk_us' => 'getExcludeListingSkUs',
        'include_committed' => 'getIncludeCommitted',
        'pagination' => 'getPagination',
        'listed_on_amazon' => 'getListedOnAmazon',
        'listed_on_ebay' => 'getListedOnEbay',
        'listed_on_play' => 'getListedOnPlay',
        'listed_on_website' => 'getListedOnWebsite'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stock_number'] = isset($data['stock_number']) ? $data['stock_number'] : null;
        $this->container['include_discontinued_items'] = isset($data['include_discontinued_items']) ? $data['include_discontinued_items'] : null;
        $this->container['exclude_products_without_stock_number'] = isset($data['exclude_products_without_stock_number']) ? $data['exclude_products_without_stock_number'] : null;
        $this->container['exclude_listing_sk_us'] = isset($data['exclude_listing_sk_us']) ? $data['exclude_listing_sk_us'] : null;
        $this->container['include_committed'] = isset($data['include_committed']) ? $data['include_committed'] : null;
        $this->container['pagination'] = isset($data['pagination']) ? $data['pagination'] : null;
        $this->container['listed_on_amazon'] = isset($data['listed_on_amazon']) ? $data['listed_on_amazon'] : null;
        $this->container['listed_on_ebay'] = isset($data['listed_on_ebay']) ? $data['listed_on_ebay'] : null;
        $this->container['listed_on_play'] = isset($data['listed_on_play']) ? $data['listed_on_play'] : null;
        $this->container['listed_on_website'] = isset($data['listed_on_website']) ? $data['listed_on_website'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets stock_number
     * @return string
     */
    public function getStockNumber()
    {
        return $this->container['stock_number'];
    }

    /**
     * Sets stock_number
     * @param string $stock_number
     * @return $this
     */
    public function setStockNumber($stock_number)
    {
        $this->container['stock_number'] = $stock_number;

        return $this;
    }

    /**
     * Gets include_discontinued_items
     * @return bool
     */
    public function getIncludeDiscontinuedItems()
    {
        return $this->container['include_discontinued_items'];
    }

    /**
     * Sets include_discontinued_items
     * @param bool $include_discontinued_items
     * @return $this
     */
    public function setIncludeDiscontinuedItems($include_discontinued_items)
    {
        $this->container['include_discontinued_items'] = $include_discontinued_items;

        return $this;
    }

    /**
     * Gets exclude_products_without_stock_number
     * @return bool
     */
    public function getExcludeProductsWithoutStockNumber()
    {
        return $this->container['exclude_products_without_stock_number'];
    }

    /**
     * Sets exclude_products_without_stock_number
     * @param bool $exclude_products_without_stock_number
     * @return $this
     */
    public function setExcludeProductsWithoutStockNumber($exclude_products_without_stock_number)
    {
        $this->container['exclude_products_without_stock_number'] = $exclude_products_without_stock_number;

        return $this;
    }

    /**
     * Gets exclude_listing_sk_us
     * @return bool
     */
    public function getExcludeListingSkUs()
    {
        return $this->container['exclude_listing_sk_us'];
    }

    /**
     * Sets exclude_listing_sk_us
     * @param bool $exclude_listing_sk_us
     * @return $this
     */
    public function setExcludeListingSkUs($exclude_listing_sk_us)
    {
        $this->container['exclude_listing_sk_us'] = $exclude_listing_sk_us;

        return $this;
    }

    /**
     * Gets include_committed
     * @return bool
     */
    public function getIncludeCommitted()
    {
        return $this->container['include_committed'];
    }

    /**
     * Sets include_committed
     * @param bool $include_committed
     * @return $this
     */
    public function setIncludeCommitted($include_committed)
    {
        $this->container['include_committed'] = $include_committed;

        return $this;
    }

    /**
     * Gets pagination
     * @return \VoloCommerce\Api\v1\Model\Pagination
     */
    public function getPagination()
    {
        return $this->container['pagination'];
    }

    /**
     * Sets pagination
     * @param \VoloCommerce\Api\v1\Model\Pagination $pagination
     * @return $this
     */
    public function setPagination($pagination)
    {
        $this->container['pagination'] = $pagination;

        return $this;
    }

    /**
     * Gets listed_on_amazon
     * @return bool
     */
    public function getListedOnAmazon()
    {
        return $this->container['listed_on_amazon'];
    }

    /**
     * Sets listed_on_amazon
     * @param bool $listed_on_amazon
     * @return $this
     */
    public function setListedOnAmazon($listed_on_amazon)
    {
        $this->container['listed_on_amazon'] = $listed_on_amazon;

        return $this;
    }

    /**
     * Gets listed_on_ebay
     * @return bool
     */
    public function getListedOnEbay()
    {
        return $this->container['listed_on_ebay'];
    }

    /**
     * Sets listed_on_ebay
     * @param bool $listed_on_ebay
     * @return $this
     */
    public function setListedOnEbay($listed_on_ebay)
    {
        $this->container['listed_on_ebay'] = $listed_on_ebay;

        return $this;
    }

    /**
     * Gets listed_on_play
     * @return bool
     */
    public function getListedOnPlay()
    {
        return $this->container['listed_on_play'];
    }

    /**
     * Sets listed_on_play
     * @param bool $listed_on_play
     * @return $this
     */
    public function setListedOnPlay($listed_on_play)
    {
        $this->container['listed_on_play'] = $listed_on_play;

        return $this;
    }

    /**
     * Gets listed_on_website
     * @return bool
     */
    public function getListedOnWebsite()
    {
        return $this->container['listed_on_website'];
    }

    /**
     * Sets listed_on_website
     * @param bool $listed_on_website
     * @return $this
     */
    public function setListedOnWebsite($listed_on_website)
    {
        $this->container['listed_on_website'] = $listed_on_website;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


