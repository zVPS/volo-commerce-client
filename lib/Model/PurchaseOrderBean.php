<?php
/**
 * PurchaseOrderBean
 *
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Model;

use \ArrayAccess;

/**
 * PurchaseOrderBean Class Doc Comment
 *
 * @category    Class
 * @package     \VoloCommerce\Api\v1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PurchaseOrderBean implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseOrderBean';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'purchase_order_number' => 'string',
        'invoice_number' => 'string',
        'description' => 'string',
        'supplier_id' => 'int',
        'status' => 'string',
        'location_id' => 'int',
        'order_date' => '\DateTime',
        'expected_delivery_date' => '\DateTime',
        'confirm_date' => '\DateTime',
        'email_sent_date' => '\DateTime',
        'currency' => 'string',
        'order_type' => 'string',
        'supplier_fee' => 'double',
        'order_value' => 'double',
        'order_items' => 'int',
        'delivery_date' => '\DateTime',
        'purchase_order_items' => '\VoloCommerce\Api\v1\Model\PurchaseOrderItems[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'purchase_order_number' => null,
        'invoice_number' => null,
        'description' => null,
        'supplier_id' => 'int32',
        'status' => null,
        'location_id' => 'int32',
        'order_date' => 'date-time',
        'expected_delivery_date' => 'date-time',
        'confirm_date' => 'date-time',
        'email_sent_date' => 'date-time',
        'currency' => null,
        'order_type' => null,
        'supplier_fee' => 'double',
        'order_value' => 'double',
        'order_items' => 'int32',
        'delivery_date' => 'date-time',
        'purchase_order_items' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'purchase_order_number' => 'purchaseOrderNumber',
        'invoice_number' => 'invoiceNumber',
        'description' => 'description',
        'supplier_id' => 'supplierId',
        'status' => 'status',
        'location_id' => 'locationId',
        'order_date' => 'orderDate',
        'expected_delivery_date' => 'expectedDeliveryDate',
        'confirm_date' => 'confirmDate',
        'email_sent_date' => 'emailSentDate',
        'currency' => 'currency',
        'order_type' => 'orderType',
        'supplier_fee' => 'supplierFee',
        'order_value' => 'orderValue',
        'order_items' => 'orderItems',
        'delivery_date' => 'deliveryDate',
        'purchase_order_items' => 'purchaseOrderItems'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'purchase_order_number' => 'setPurchaseOrderNumber',
        'invoice_number' => 'setInvoiceNumber',
        'description' => 'setDescription',
        'supplier_id' => 'setSupplierId',
        'status' => 'setStatus',
        'location_id' => 'setLocationId',
        'order_date' => 'setOrderDate',
        'expected_delivery_date' => 'setExpectedDeliveryDate',
        'confirm_date' => 'setConfirmDate',
        'email_sent_date' => 'setEmailSentDate',
        'currency' => 'setCurrency',
        'order_type' => 'setOrderType',
        'supplier_fee' => 'setSupplierFee',
        'order_value' => 'setOrderValue',
        'order_items' => 'setOrderItems',
        'delivery_date' => 'setDeliveryDate',
        'purchase_order_items' => 'setPurchaseOrderItems'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'purchase_order_number' => 'getPurchaseOrderNumber',
        'invoice_number' => 'getInvoiceNumber',
        'description' => 'getDescription',
        'supplier_id' => 'getSupplierId',
        'status' => 'getStatus',
        'location_id' => 'getLocationId',
        'order_date' => 'getOrderDate',
        'expected_delivery_date' => 'getExpectedDeliveryDate',
        'confirm_date' => 'getConfirmDate',
        'email_sent_date' => 'getEmailSentDate',
        'currency' => 'getCurrency',
        'order_type' => 'getOrderType',
        'supplier_fee' => 'getSupplierFee',
        'order_value' => 'getOrderValue',
        'order_items' => 'getOrderItems',
        'delivery_date' => 'getDeliveryDate',
        'purchase_order_items' => 'getPurchaseOrderItems'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['purchase_order_number'] = isset($data['purchase_order_number']) ? $data['purchase_order_number'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['expected_delivery_date'] = isset($data['expected_delivery_date']) ? $data['expected_delivery_date'] : null;
        $this->container['confirm_date'] = isset($data['confirm_date']) ? $data['confirm_date'] : null;
        $this->container['email_sent_date'] = isset($data['email_sent_date']) ? $data['email_sent_date'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['supplier_fee'] = isset($data['supplier_fee']) ? $data['supplier_fee'] : null;
        $this->container['order_value'] = isset($data['order_value']) ? $data['order_value'] : null;
        $this->container['order_items'] = isset($data['order_items']) ? $data['order_items'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['purchase_order_items'] = isset($data['purchase_order_items']) ? $data['purchase_order_items'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets purchase_order_number
     * @return string
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchase_order_number'];
    }

    /**
     * Sets purchase_order_number
     * @param string $purchase_order_number
     * @return $this
     */
    public function setPurchaseOrderNumber($purchase_order_number)
    {
        $this->container['purchase_order_number'] = $purchase_order_number;

        return $this;
    }

    /**
     * Gets invoice_number
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     * @param string $invoice_number
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets supplier_id
     * @return int
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     * @param int $supplier_id
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets order_date
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     * @param \DateTime $order_date
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets expected_delivery_date
     * @return \DateTime
     */
    public function getExpectedDeliveryDate()
    {
        return $this->container['expected_delivery_date'];
    }

    /**
     * Sets expected_delivery_date
     * @param \DateTime $expected_delivery_date
     * @return $this
     */
    public function setExpectedDeliveryDate($expected_delivery_date)
    {
        $this->container['expected_delivery_date'] = $expected_delivery_date;

        return $this;
    }

    /**
     * Gets confirm_date
     * @return \DateTime
     */
    public function getConfirmDate()
    {
        return $this->container['confirm_date'];
    }

    /**
     * Sets confirm_date
     * @param \DateTime $confirm_date
     * @return $this
     */
    public function setConfirmDate($confirm_date)
    {
        $this->container['confirm_date'] = $confirm_date;

        return $this;
    }

    /**
     * Gets email_sent_date
     * @return \DateTime
     */
    public function getEmailSentDate()
    {
        return $this->container['email_sent_date'];
    }

    /**
     * Sets email_sent_date
     * @param \DateTime $email_sent_date
     * @return $this
     */
    public function setEmailSentDate($email_sent_date)
    {
        $this->container['email_sent_date'] = $email_sent_date;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets order_type
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     * @param string $order_type
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets supplier_fee
     * @return double
     */
    public function getSupplierFee()
    {
        return $this->container['supplier_fee'];
    }

    /**
     * Sets supplier_fee
     * @param double $supplier_fee
     * @return $this
     */
    public function setSupplierFee($supplier_fee)
    {
        $this->container['supplier_fee'] = $supplier_fee;

        return $this;
    }

    /**
     * Gets order_value
     * @return double
     */
    public function getOrderValue()
    {
        return $this->container['order_value'];
    }

    /**
     * Sets order_value
     * @param double $order_value
     * @return $this
     */
    public function setOrderValue($order_value)
    {
        $this->container['order_value'] = $order_value;

        return $this;
    }

    /**
     * Gets order_items
     * @return int
     */
    public function getOrderItems()
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     * @param int $order_items
     * @return $this
     */
    public function setOrderItems($order_items)
    {
        $this->container['order_items'] = $order_items;

        return $this;
    }

    /**
     * Gets delivery_date
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     * @param \DateTime $delivery_date
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets purchase_order_items
     * @return \VoloCommerce\Api\v1\Model\PurchaseOrderItems[]
     */
    public function getPurchaseOrderItems()
    {
        return $this->container['purchase_order_items'];
    }

    /**
     * Sets purchase_order_items
     * @param \VoloCommerce\Api\v1\Model\PurchaseOrderItems[] $purchase_order_items
     * @return $this
     */
    public function setPurchaseOrderItems($purchase_order_items)
    {
        $this->container['purchase_order_items'] = $purchase_order_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


