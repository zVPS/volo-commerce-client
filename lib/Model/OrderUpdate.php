<?php
/**
 * OrderUpdate
 *
 * PHP version 5
 *
 * @category Class
 * @package  \VoloCommerce\Api\v1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Volo Public APIs
 *
 * Volo Public APIs
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VoloCommerce\Api\v1\Model;

use \ArrayAccess;

/**
 * OrderUpdate Class Doc Comment
 *
 * @category    Class
 * @package     \VoloCommerce\Api\v1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderUpdate implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OrderUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'esp_order_no' => 'int',
        'order_status' => 'string',
        'on_hold_notes' => 'string',
        'courier' => 'string',
        'courier_service' => 'string',
        'courier_tracking' => 'string',
        'flag1' => 'string',
        'flag2' => 'string',
        'customer_company' => 'string',
        'customer_name' => 'string',
        'customer_address1' => 'string',
        'customer_address2' => 'string',
        'customer_address3' => 'string',
        'customer_city' => 'string',
        'customer_county' => 'string',
        'customer_postcode' => 'string',
        'customer_country' => 'string',
        'customer_email' => 'string',
        'customer_telephone' => 'string',
        'customer_reference' => 'string',
        'customer_notes' => 'string',
        'delivery_company' => 'string',
        'delivery_name' => 'string',
        'delivery_address1' => 'string',
        'delivery_address2' => 'string',
        'delivery_address3' => 'string',
        'delivery_city' => 'string',
        'delivery_county' => 'string',
        'delivery_postcode' => 'string',
        'delivery_country' => 'string',
        'delivery_telephone' => 'string',
        'shipping_method' => 'string',
        'voucher_code' => 'string',
        'trade_sale' => 'bool',
        'actual_courier_cost' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'esp_order_no' => 'int32',
        'order_status' => null,
        'on_hold_notes' => null,
        'courier' => null,
        'courier_service' => null,
        'courier_tracking' => null,
        'flag1' => null,
        'flag2' => null,
        'customer_company' => null,
        'customer_name' => null,
        'customer_address1' => null,
        'customer_address2' => null,
        'customer_address3' => null,
        'customer_city' => null,
        'customer_county' => null,
        'customer_postcode' => null,
        'customer_country' => null,
        'customer_email' => null,
        'customer_telephone' => null,
        'customer_reference' => null,
        'customer_notes' => null,
        'delivery_company' => null,
        'delivery_name' => null,
        'delivery_address1' => null,
        'delivery_address2' => null,
        'delivery_address3' => null,
        'delivery_city' => null,
        'delivery_county' => null,
        'delivery_postcode' => null,
        'delivery_country' => null,
        'delivery_telephone' => null,
        'shipping_method' => null,
        'voucher_code' => null,
        'trade_sale' => null,
        'actual_courier_cost' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'esp_order_no' => 'espOrderNo',
        'order_status' => 'orderStatus',
        'on_hold_notes' => 'onHoldNotes',
        'courier' => 'courier',
        'courier_service' => 'courierService',
        'courier_tracking' => 'courierTracking',
        'flag1' => 'flag1',
        'flag2' => 'flag2',
        'customer_company' => 'customerCompany',
        'customer_name' => 'customerName',
        'customer_address1' => 'customerAddress1',
        'customer_address2' => 'customerAddress2',
        'customer_address3' => 'customerAddress3',
        'customer_city' => 'customerCity',
        'customer_county' => 'customerCounty',
        'customer_postcode' => 'customerPostcode',
        'customer_country' => 'customerCountry',
        'customer_email' => 'customerEmail',
        'customer_telephone' => 'customerTelephone',
        'customer_reference' => 'customerReference',
        'customer_notes' => 'customerNotes',
        'delivery_company' => 'deliveryCompany',
        'delivery_name' => 'deliveryName',
        'delivery_address1' => 'deliveryAddress1',
        'delivery_address2' => 'deliveryAddress2',
        'delivery_address3' => 'deliveryAddress3',
        'delivery_city' => 'deliveryCity',
        'delivery_county' => 'deliveryCounty',
        'delivery_postcode' => 'deliveryPostcode',
        'delivery_country' => 'deliveryCountry',
        'delivery_telephone' => 'deliveryTelephone',
        'shipping_method' => 'shippingMethod',
        'voucher_code' => 'voucherCode',
        'trade_sale' => 'tradeSale',
        'actual_courier_cost' => 'actualCourierCost'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'esp_order_no' => 'setEspOrderNo',
        'order_status' => 'setOrderStatus',
        'on_hold_notes' => 'setOnHoldNotes',
        'courier' => 'setCourier',
        'courier_service' => 'setCourierService',
        'courier_tracking' => 'setCourierTracking',
        'flag1' => 'setFlag1',
        'flag2' => 'setFlag2',
        'customer_company' => 'setCustomerCompany',
        'customer_name' => 'setCustomerName',
        'customer_address1' => 'setCustomerAddress1',
        'customer_address2' => 'setCustomerAddress2',
        'customer_address3' => 'setCustomerAddress3',
        'customer_city' => 'setCustomerCity',
        'customer_county' => 'setCustomerCounty',
        'customer_postcode' => 'setCustomerPostcode',
        'customer_country' => 'setCustomerCountry',
        'customer_email' => 'setCustomerEmail',
        'customer_telephone' => 'setCustomerTelephone',
        'customer_reference' => 'setCustomerReference',
        'customer_notes' => 'setCustomerNotes',
        'delivery_company' => 'setDeliveryCompany',
        'delivery_name' => 'setDeliveryName',
        'delivery_address1' => 'setDeliveryAddress1',
        'delivery_address2' => 'setDeliveryAddress2',
        'delivery_address3' => 'setDeliveryAddress3',
        'delivery_city' => 'setDeliveryCity',
        'delivery_county' => 'setDeliveryCounty',
        'delivery_postcode' => 'setDeliveryPostcode',
        'delivery_country' => 'setDeliveryCountry',
        'delivery_telephone' => 'setDeliveryTelephone',
        'shipping_method' => 'setShippingMethod',
        'voucher_code' => 'setVoucherCode',
        'trade_sale' => 'setTradeSale',
        'actual_courier_cost' => 'setActualCourierCost'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'esp_order_no' => 'getEspOrderNo',
        'order_status' => 'getOrderStatus',
        'on_hold_notes' => 'getOnHoldNotes',
        'courier' => 'getCourier',
        'courier_service' => 'getCourierService',
        'courier_tracking' => 'getCourierTracking',
        'flag1' => 'getFlag1',
        'flag2' => 'getFlag2',
        'customer_company' => 'getCustomerCompany',
        'customer_name' => 'getCustomerName',
        'customer_address1' => 'getCustomerAddress1',
        'customer_address2' => 'getCustomerAddress2',
        'customer_address3' => 'getCustomerAddress3',
        'customer_city' => 'getCustomerCity',
        'customer_county' => 'getCustomerCounty',
        'customer_postcode' => 'getCustomerPostcode',
        'customer_country' => 'getCustomerCountry',
        'customer_email' => 'getCustomerEmail',
        'customer_telephone' => 'getCustomerTelephone',
        'customer_reference' => 'getCustomerReference',
        'customer_notes' => 'getCustomerNotes',
        'delivery_company' => 'getDeliveryCompany',
        'delivery_name' => 'getDeliveryName',
        'delivery_address1' => 'getDeliveryAddress1',
        'delivery_address2' => 'getDeliveryAddress2',
        'delivery_address3' => 'getDeliveryAddress3',
        'delivery_city' => 'getDeliveryCity',
        'delivery_county' => 'getDeliveryCounty',
        'delivery_postcode' => 'getDeliveryPostcode',
        'delivery_country' => 'getDeliveryCountry',
        'delivery_telephone' => 'getDeliveryTelephone',
        'shipping_method' => 'getShippingMethod',
        'voucher_code' => 'getVoucherCode',
        'trade_sale' => 'getTradeSale',
        'actual_courier_cost' => 'getActualCourierCost'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ORDER_STATUS_WAITING_FOR_DELIVERY = 'WAITING_FOR_DELIVERY';
    const ORDER_STATUS_DELIVERED = 'DELIVERED';
    const ORDER_STATUS_CANCELLED = 'CANCELLED';
    const ORDER_STATUS_ON_HOLD = 'ON_HOLD';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOrderStatusAllowableValues()
    {
        return [
            self::ORDER_STATUS_WAITING_FOR_DELIVERY,
            self::ORDER_STATUS_DELIVERED,
            self::ORDER_STATUS_CANCELLED,
            self::ORDER_STATUS_ON_HOLD,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['esp_order_no'] = isset($data['esp_order_no']) ? $data['esp_order_no'] : null;
        $this->container['order_status'] = isset($data['order_status']) ? $data['order_status'] : null;
        $this->container['on_hold_notes'] = isset($data['on_hold_notes']) ? $data['on_hold_notes'] : null;
        $this->container['courier'] = isset($data['courier']) ? $data['courier'] : null;
        $this->container['courier_service'] = isset($data['courier_service']) ? $data['courier_service'] : null;
        $this->container['courier_tracking'] = isset($data['courier_tracking']) ? $data['courier_tracking'] : null;
        $this->container['flag1'] = isset($data['flag1']) ? $data['flag1'] : null;
        $this->container['flag2'] = isset($data['flag2']) ? $data['flag2'] : null;
        $this->container['customer_company'] = isset($data['customer_company']) ? $data['customer_company'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['customer_address1'] = isset($data['customer_address1']) ? $data['customer_address1'] : null;
        $this->container['customer_address2'] = isset($data['customer_address2']) ? $data['customer_address2'] : null;
        $this->container['customer_address3'] = isset($data['customer_address3']) ? $data['customer_address3'] : null;
        $this->container['customer_city'] = isset($data['customer_city']) ? $data['customer_city'] : null;
        $this->container['customer_county'] = isset($data['customer_county']) ? $data['customer_county'] : null;
        $this->container['customer_postcode'] = isset($data['customer_postcode']) ? $data['customer_postcode'] : null;
        $this->container['customer_country'] = isset($data['customer_country']) ? $data['customer_country'] : null;
        $this->container['customer_email'] = isset($data['customer_email']) ? $data['customer_email'] : null;
        $this->container['customer_telephone'] = isset($data['customer_telephone']) ? $data['customer_telephone'] : null;
        $this->container['customer_reference'] = isset($data['customer_reference']) ? $data['customer_reference'] : null;
        $this->container['customer_notes'] = isset($data['customer_notes']) ? $data['customer_notes'] : null;
        $this->container['delivery_company'] = isset($data['delivery_company']) ? $data['delivery_company'] : null;
        $this->container['delivery_name'] = isset($data['delivery_name']) ? $data['delivery_name'] : null;
        $this->container['delivery_address1'] = isset($data['delivery_address1']) ? $data['delivery_address1'] : null;
        $this->container['delivery_address2'] = isset($data['delivery_address2']) ? $data['delivery_address2'] : null;
        $this->container['delivery_address3'] = isset($data['delivery_address3']) ? $data['delivery_address3'] : null;
        $this->container['delivery_city'] = isset($data['delivery_city']) ? $data['delivery_city'] : null;
        $this->container['delivery_county'] = isset($data['delivery_county']) ? $data['delivery_county'] : null;
        $this->container['delivery_postcode'] = isset($data['delivery_postcode']) ? $data['delivery_postcode'] : null;
        $this->container['delivery_country'] = isset($data['delivery_country']) ? $data['delivery_country'] : null;
        $this->container['delivery_telephone'] = isset($data['delivery_telephone']) ? $data['delivery_telephone'] : null;
        $this->container['shipping_method'] = isset($data['shipping_method']) ? $data['shipping_method'] : null;
        $this->container['voucher_code'] = isset($data['voucher_code']) ? $data['voucher_code'] : null;
        $this->container['trade_sale'] = isset($data['trade_sale']) ? $data['trade_sale'] : null;
        $this->container['actual_courier_cost'] = isset($data['actual_courier_cost']) ? $data['actual_courier_cost'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getOrderStatusAllowableValues();
        if (!in_array($this->container['order_status'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'order_status', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getOrderStatusAllowableValues();
        if (!in_array($this->container['order_status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets esp_order_no
     * @return int
     */
    public function getEspOrderNo()
    {
        return $this->container['esp_order_no'];
    }

    /**
     * Sets esp_order_no
     * @param int $esp_order_no
     * @return $this
     */
    public function setEspOrderNo($esp_order_no)
    {
        $this->container['esp_order_no'] = $esp_order_no;

        return $this;
    }

    /**
     * Gets order_status
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     * @param string $order_status
     * @return $this
     */
    public function setOrderStatus($order_status)
    {
        $allowed_values = $this->getOrderStatusAllowableValues();
        if (!is_null($order_status) && !in_array($order_status, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_status', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets on_hold_notes
     * @return string
     */
    public function getOnHoldNotes()
    {
        return $this->container['on_hold_notes'];
    }

    /**
     * Sets on_hold_notes
     * @param string $on_hold_notes
     * @return $this
     */
    public function setOnHoldNotes($on_hold_notes)
    {
        $this->container['on_hold_notes'] = $on_hold_notes;

        return $this;
    }

    /**
     * Gets courier
     * @return string
     */
    public function getCourier()
    {
        return $this->container['courier'];
    }

    /**
     * Sets courier
     * @param string $courier
     * @return $this
     */
    public function setCourier($courier)
    {
        $this->container['courier'] = $courier;

        return $this;
    }

    /**
     * Gets courier_service
     * @return string
     */
    public function getCourierService()
    {
        return $this->container['courier_service'];
    }

    /**
     * Sets courier_service
     * @param string $courier_service
     * @return $this
     */
    public function setCourierService($courier_service)
    {
        $this->container['courier_service'] = $courier_service;

        return $this;
    }

    /**
     * Gets courier_tracking
     * @return string
     */
    public function getCourierTracking()
    {
        return $this->container['courier_tracking'];
    }

    /**
     * Sets courier_tracking
     * @param string $courier_tracking
     * @return $this
     */
    public function setCourierTracking($courier_tracking)
    {
        $this->container['courier_tracking'] = $courier_tracking;

        return $this;
    }

    /**
     * Gets flag1
     * @return string
     */
    public function getFlag1()
    {
        return $this->container['flag1'];
    }

    /**
     * Sets flag1
     * @param string $flag1
     * @return $this
     */
    public function setFlag1($flag1)
    {
        $this->container['flag1'] = $flag1;

        return $this;
    }

    /**
     * Gets flag2
     * @return string
     */
    public function getFlag2()
    {
        return $this->container['flag2'];
    }

    /**
     * Sets flag2
     * @param string $flag2
     * @return $this
     */
    public function setFlag2($flag2)
    {
        $this->container['flag2'] = $flag2;

        return $this;
    }

    /**
     * Gets customer_company
     * @return string
     */
    public function getCustomerCompany()
    {
        return $this->container['customer_company'];
    }

    /**
     * Sets customer_company
     * @param string $customer_company
     * @return $this
     */
    public function setCustomerCompany($customer_company)
    {
        $this->container['customer_company'] = $customer_company;

        return $this;
    }

    /**
     * Gets customer_name
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     * @param string $customer_name
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets customer_address1
     * @return string
     */
    public function getCustomerAddress1()
    {
        return $this->container['customer_address1'];
    }

    /**
     * Sets customer_address1
     * @param string $customer_address1
     * @return $this
     */
    public function setCustomerAddress1($customer_address1)
    {
        $this->container['customer_address1'] = $customer_address1;

        return $this;
    }

    /**
     * Gets customer_address2
     * @return string
     */
    public function getCustomerAddress2()
    {
        return $this->container['customer_address2'];
    }

    /**
     * Sets customer_address2
     * @param string $customer_address2
     * @return $this
     */
    public function setCustomerAddress2($customer_address2)
    {
        $this->container['customer_address2'] = $customer_address2;

        return $this;
    }

    /**
     * Gets customer_address3
     * @return string
     */
    public function getCustomerAddress3()
    {
        return $this->container['customer_address3'];
    }

    /**
     * Sets customer_address3
     * @param string $customer_address3
     * @return $this
     */
    public function setCustomerAddress3($customer_address3)
    {
        $this->container['customer_address3'] = $customer_address3;

        return $this;
    }

    /**
     * Gets customer_city
     * @return string
     */
    public function getCustomerCity()
    {
        return $this->container['customer_city'];
    }

    /**
     * Sets customer_city
     * @param string $customer_city
     * @return $this
     */
    public function setCustomerCity($customer_city)
    {
        $this->container['customer_city'] = $customer_city;

        return $this;
    }

    /**
     * Gets customer_county
     * @return string
     */
    public function getCustomerCounty()
    {
        return $this->container['customer_county'];
    }

    /**
     * Sets customer_county
     * @param string $customer_county
     * @return $this
     */
    public function setCustomerCounty($customer_county)
    {
        $this->container['customer_county'] = $customer_county;

        return $this;
    }

    /**
     * Gets customer_postcode
     * @return string
     */
    public function getCustomerPostcode()
    {
        return $this->container['customer_postcode'];
    }

    /**
     * Sets customer_postcode
     * @param string $customer_postcode
     * @return $this
     */
    public function setCustomerPostcode($customer_postcode)
    {
        $this->container['customer_postcode'] = $customer_postcode;

        return $this;
    }

    /**
     * Gets customer_country
     * @return string
     */
    public function getCustomerCountry()
    {
        return $this->container['customer_country'];
    }

    /**
     * Sets customer_country
     * @param string $customer_country
     * @return $this
     */
    public function setCustomerCountry($customer_country)
    {
        $this->container['customer_country'] = $customer_country;

        return $this;
    }

    /**
     * Gets customer_email
     * @return string
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     * @param string $customer_email
     * @return $this
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets customer_telephone
     * @return string
     */
    public function getCustomerTelephone()
    {
        return $this->container['customer_telephone'];
    }

    /**
     * Sets customer_telephone
     * @param string $customer_telephone
     * @return $this
     */
    public function setCustomerTelephone($customer_telephone)
    {
        $this->container['customer_telephone'] = $customer_telephone;

        return $this;
    }

    /**
     * Gets customer_reference
     * @return string
     */
    public function getCustomerReference()
    {
        return $this->container['customer_reference'];
    }

    /**
     * Sets customer_reference
     * @param string $customer_reference
     * @return $this
     */
    public function setCustomerReference($customer_reference)
    {
        $this->container['customer_reference'] = $customer_reference;

        return $this;
    }

    /**
     * Gets customer_notes
     * @return string
     */
    public function getCustomerNotes()
    {
        return $this->container['customer_notes'];
    }

    /**
     * Sets customer_notes
     * @param string $customer_notes
     * @return $this
     */
    public function setCustomerNotes($customer_notes)
    {
        $this->container['customer_notes'] = $customer_notes;

        return $this;
    }

    /**
     * Gets delivery_company
     * @return string
     */
    public function getDeliveryCompany()
    {
        return $this->container['delivery_company'];
    }

    /**
     * Sets delivery_company
     * @param string $delivery_company
     * @return $this
     */
    public function setDeliveryCompany($delivery_company)
    {
        $this->container['delivery_company'] = $delivery_company;

        return $this;
    }

    /**
     * Gets delivery_name
     * @return string
     */
    public function getDeliveryName()
    {
        return $this->container['delivery_name'];
    }

    /**
     * Sets delivery_name
     * @param string $delivery_name
     * @return $this
     */
    public function setDeliveryName($delivery_name)
    {
        $this->container['delivery_name'] = $delivery_name;

        return $this;
    }

    /**
     * Gets delivery_address1
     * @return string
     */
    public function getDeliveryAddress1()
    {
        return $this->container['delivery_address1'];
    }

    /**
     * Sets delivery_address1
     * @param string $delivery_address1
     * @return $this
     */
    public function setDeliveryAddress1($delivery_address1)
    {
        $this->container['delivery_address1'] = $delivery_address1;

        return $this;
    }

    /**
     * Gets delivery_address2
     * @return string
     */
    public function getDeliveryAddress2()
    {
        return $this->container['delivery_address2'];
    }

    /**
     * Sets delivery_address2
     * @param string $delivery_address2
     * @return $this
     */
    public function setDeliveryAddress2($delivery_address2)
    {
        $this->container['delivery_address2'] = $delivery_address2;

        return $this;
    }

    /**
     * Gets delivery_address3
     * @return string
     */
    public function getDeliveryAddress3()
    {
        return $this->container['delivery_address3'];
    }

    /**
     * Sets delivery_address3
     * @param string $delivery_address3
     * @return $this
     */
    public function setDeliveryAddress3($delivery_address3)
    {
        $this->container['delivery_address3'] = $delivery_address3;

        return $this;
    }

    /**
     * Gets delivery_city
     * @return string
     */
    public function getDeliveryCity()
    {
        return $this->container['delivery_city'];
    }

    /**
     * Sets delivery_city
     * @param string $delivery_city
     * @return $this
     */
    public function setDeliveryCity($delivery_city)
    {
        $this->container['delivery_city'] = $delivery_city;

        return $this;
    }

    /**
     * Gets delivery_county
     * @return string
     */
    public function getDeliveryCounty()
    {
        return $this->container['delivery_county'];
    }

    /**
     * Sets delivery_county
     * @param string $delivery_county
     * @return $this
     */
    public function setDeliveryCounty($delivery_county)
    {
        $this->container['delivery_county'] = $delivery_county;

        return $this;
    }

    /**
     * Gets delivery_postcode
     * @return string
     */
    public function getDeliveryPostcode()
    {
        return $this->container['delivery_postcode'];
    }

    /**
     * Sets delivery_postcode
     * @param string $delivery_postcode
     * @return $this
     */
    public function setDeliveryPostcode($delivery_postcode)
    {
        $this->container['delivery_postcode'] = $delivery_postcode;

        return $this;
    }

    /**
     * Gets delivery_country
     * @return string
     */
    public function getDeliveryCountry()
    {
        return $this->container['delivery_country'];
    }

    /**
     * Sets delivery_country
     * @param string $delivery_country
     * @return $this
     */
    public function setDeliveryCountry($delivery_country)
    {
        $this->container['delivery_country'] = $delivery_country;

        return $this;
    }

    /**
     * Gets delivery_telephone
     * @return string
     */
    public function getDeliveryTelephone()
    {
        return $this->container['delivery_telephone'];
    }

    /**
     * Sets delivery_telephone
     * @param string $delivery_telephone
     * @return $this
     */
    public function setDeliveryTelephone($delivery_telephone)
    {
        $this->container['delivery_telephone'] = $delivery_telephone;

        return $this;
    }

    /**
     * Gets shipping_method
     * @return string
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     * @param string $shipping_method
     * @return $this
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets voucher_code
     * @return string
     */
    public function getVoucherCode()
    {
        return $this->container['voucher_code'];
    }

    /**
     * Sets voucher_code
     * @param string $voucher_code
     * @return $this
     */
    public function setVoucherCode($voucher_code)
    {
        $this->container['voucher_code'] = $voucher_code;

        return $this;
    }

    /**
     * Gets trade_sale
     * @return bool
     */
    public function getTradeSale()
    {
        return $this->container['trade_sale'];
    }

    /**
     * Sets trade_sale
     * @param bool $trade_sale
     * @return $this
     */
    public function setTradeSale($trade_sale)
    {
        $this->container['trade_sale'] = $trade_sale;

        return $this;
    }

    /**
     * Gets actual_courier_cost
     * @return double
     */
    public function getActualCourierCost()
    {
        return $this->container['actual_courier_cost'];
    }

    /**
     * Sets actual_courier_cost
     * @param double $actual_courier_cost
     * @return $this
     */
    public function setActualCourierCost($actual_courier_cost)
    {
        $this->container['actual_courier_cost'] = $actual_courier_cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\VoloCommerce\Api\v1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


